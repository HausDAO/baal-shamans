{
    "language": "Solidity",
    "sources": {
      "contracts/memberRegistry/PGRegistry.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./MemberRegistry.sol\";\n\nimport \"../interfaces/IBAAL.sol\";\n\n// Register\ncontract PGRegistry is MemberRegistry, Ownable {\n    IBAAL public moloch;\n    \n    constructor(address _moloch) {\n        moloch = IBAAL(_moloch);\n    }\n\n    function setNewMember(\n        address _member,\n        uint32 _activityMultiplier,\n        uint32 _startDate\n    ) public onlyOwner {\n        _setNewMember(_member, _activityMultiplier, _startDate);\n    }\n\n    function updateMember(\n        address _member,\n        uint32 _activityMultiplier\n        ) public onlyOwner {\n        _updateMember(_member, _activityMultiplier);\n    }\n\n    function batchNewMember(\n        address[] memory _members,\n        uint32[] memory _activityMultipliers,\n        uint32[] memory _startDates\n    ) public onlyOwner {\n        for (uint256 i = 0; i < members.length; i++) {\n            _setNewMember(_members[i], _activityMultipliers[i], _startDates[i]);\n        }\n\n    }\n\n    function batchUpdateMember(\n        address[] memory _members,\n        uint32[] memory _activityMultipliers\n        ) public onlyOwner {\n            for (uint256 i = 0; i < members.length; i++) {\n                _updateMember(_members[i], _activityMultipliers[i]);\n            }\n    }\n\n    function _calculate(address _account) internal override view returns (uint256) {\n        uint256 activeSeconds = super._calculate(_account);\n        return activeSeconds;\n        // return member.secondsActive.sqrt(); \n        // SQRT((Total_Months - Months_on_break)* Time_Multiplier)\n    }\n\n    function _distribute(uint256[] memory calculated) internal override returns(bool) {\n        address[] memory _receivers = new address[](calculated.length);\n \n        for (uint256 i = 0; i < calculated.length; i++) {\n            _receivers[i] = members[i].account;\n\n        }\n        moloch.mintShares(_receivers, calculated);\n        return true;\n \n    }\n}"
      },
      "contracts/memberRegistry/MemberRegistry.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Register\nabstract contract MemberRegistry {\n\n    // 20 + 4 + 4\n    struct Member {\n        address account;\n        uint32 secondsActive;\n        uint32 activityMultiplier;\n    }\n\n    uint32 public lastUpdate;\n    uint32 public lastTrigger;\n    Member[] public members;\n    // iterable\n    uint256 public count = 1;\n    mapping(address => uint256) public memberIdxs; \n\n    event SetMember(Member member);\n    event UpdateMember(Member member);\n    event Update(uint32);\n    event Trigger(uint32);\n    event Claim(address);\n\n    // todo: batch?\n    function _setNewMember(\n        address _member,\n        uint32 _activityMultiplier,\n        uint32 _startDate\n    ) internal {\n        // require unique?\n        require(memberIdxs[_member] == 0, \"already registered\");\n        members[count-1] = Member(\n            _member,\n            uint32(block.timestamp) - _startDate,\n            _activityMultiplier\n        );\n        memberIdxs[_member] = count-1;\n        emit SetMember(members[count-1]);\n        count += 1;\n    }\n\n    function _updateMember(\n        address _member,\n        uint32 _activityMultiplier\n        ) internal {\n        require(memberIdxs[_member] != 0, \"not registered\");\n        members[memberIdxs[_member]].activityMultiplier = _activityMultiplier;\n        emit UpdateMember(members[memberIdxs[_member]]);\n    }\n\n    //todo: zero out or delete member\n\n    function _updateSecondsActive() virtual public {\n        for (uint256 i = 0; i < members.length; i++) {\n            Member storage _member = members[i];\n            _member.secondsActive += (uint32(block.timestamp) - lastUpdate) * _member.activityMultiplier;\n        }\n        lastUpdate = uint32(block.timestamp);\n        emit Update(lastUpdate);\n    }\n\n    // trigger distribute for all members\n    function trigger() virtual public {\n        // todo: require tigger to happen after/before update?\n        uint256[] memory calculated = new uint[](members.length);\n\n        for (uint256 i = 0; i < members.length; i++) {\n            calculated[i] = _calculate(members[i].account); // todo: store in format for 0xsplits\n        }\n        _distribute(calculated); // param of data struct\n        lastTrigger = uint32(block.timestamp);\n        emit Trigger(lastTrigger);\n    }\n\n    // per member claim\n    function claim() virtual public {\n        require(memberIdxs[msg.sender] != 0, \"not registered\");\n        _sync(msg.sender);\n        emit Claim(msg.sender);\n    }\n\n    // internal\n    function _calculate(address _account) virtual internal view returns (uint256) {\n        uint256 memberIdx = memberIdxs[_account];\n        Member storage member = members[memberIdx];\n        return member.secondsActive; // todo: do something more with this?\n        // return member.secondsActive.sqrt(); \n        // SQRT((Total_Months - Months_on_break)* Time_Multiplier)\n    }\n\n    function _distribute(uint256[] memory calculated) virtual internal returns (bool success) {\n        for (uint256 i = 0; i < calculated.length; i++) {\n            // todo: store in format for 0xsplits\n        }\n        return true;\n    }\n\n    function _sync(address _account) virtual internal view returns (uint256) {\n    }\n\n}"
      },
      "contracts/interfaces/IBAAL.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.7;\n\ninterface IBAAL {\n    function mintLoot(address[] calldata to, uint256[] calldata amount) external;\n    function mintShares(address[] calldata to, uint256[] calldata amount) external;\n    function shamans(address shaman) external returns(uint256);\n    function isManager(address shaman) external returns(bool);\n    function target() external returns(address);\n    function totalSupply() external view returns (uint256);\n    function sharesToken() external view returns (address);\n    function lootToken() external view returns (address);\n}"
      },
      "@openzeppelin/contracts/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": { "enabled": true, "runs": 100 },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": ["ast"]
        }
      }
    }
  }