/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  OwnerManager,
  OwnerManagerInterface,
} from "../../../../../@gnosis.pm/safe-contracts/contracts/base/OwnerManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "AddedOwner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "threshold",
        type: "uint256",
      },
    ],
    name: "ChangedThreshold",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "RemovedOwner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "addOwnerWithThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "changeThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "swapOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a34806100206000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c80630d582f13146100725780632f54bf6e14610087578063694e80c3146100af578063a0e67e2b146100c2578063e318b52b146100d7578063e75235b8146100ea578063f8dc5dd9146100fb575b600080fd5b610085610080366004610853565b61010e565b005b61009a6100953660046107b2565b61026a565b60405190151581526020015b60405180910390f35b6100856100bd36600461087d565b6102a5565b6100ca610343565b6040516100a691906108aa565b6100856100e53660046107d4565b610433565b6002546040519081526020016100a6565b610085610109366004610817565b610608565b61011661075d565b6001600160a01b0382161580159061013857506001600160a01b038216600114155b801561014d57506001600160a01b0382163014155b6101725760405162461bcd60e51b815260040161016990610916565b60405180910390fd5b6001600160a01b0382811660009081526020819052604090205416156101aa5760405162461bcd60e51b815260040161016990610935565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d80546001600160a01b03858116808552604085208054929093166001600160a01b03199283161790925560018085528354909116909117909155805491610218836109a1565b91905055507f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea268260405161024c9190610896565b60405180910390a1806002541461026657610266816102a5565b5050565b60006001600160a01b03821660011480159061029f57506001600160a01b038281166000908152602081905260409020541615155b92915050565b6102ad61075d565b6001548111156102cf5760405162461bcd60e51b8152600401610169906108f7565b60018110156103085760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b6044820152606401610169565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff811115610362576103626109e8565b60405190808252806020026020018201604052801561038b578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d54919250906001600160a01b03165b6001600160a01b03811660011461042b57808383815181106103ec576103ec6109d2565b6001600160a01b039283166020918202929092018101919091529181166000908152918290526040909120541681610423816109a1565b9250506103c8565b509092915050565b61043b61075d565b6001600160a01b0381161580159061045d57506001600160a01b038116600114155b801561047257506001600160a01b0381163014155b61048e5760405162461bcd60e51b815260040161016990610916565b6001600160a01b0381811660009081526020819052604090205416156104c65760405162461bcd60e51b815260040161016990610935565b6001600160a01b038216158015906104e857506001600160a01b038216600114155b6105045760405162461bcd60e51b815260040161016990610916565b6001600160a01b038381166000908152602081905260409020548116908316146105405760405162461bcd60e51b815260040161016990610954565b6001600160a01b03828116600081815260208190526040808220805486861680855283852080549288166001600160a01b03199384161790559589168452828420805482169096179095559290915281549092169055517ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf906105c4908490610896565b60405180910390a17f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26816040516105fb9190610896565b60405180910390a1505050565b61061061075d565b806001805461061f9190610973565b101561063d5760405162461bcd60e51b8152600401610169906108f7565b6001600160a01b0382161580159061065f57506001600160a01b038216600114155b61067b5760405162461bcd60e51b815260040161016990610916565b6001600160a01b038381166000908152602081905260409020548116908316146106b75760405162461bcd60e51b815260040161016990610954565b6001600160a01b03828116600081815260208190526040808220805488861684529183208054929095166001600160a01b0319928316179094559181528254909116909155600180549161070a8361098a565b91905055507ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf8260405161073e9190610896565b60405180910390a1806002541461075857610758816102a5565b505050565b3330146107945760405162461bcd60e51b8152602060048201526005602482015264475330333160d81b6044820152606401610169565b565b80356001600160a01b03811681146107ad57600080fd5b919050565b6000602082840312156107c457600080fd5b6107cd82610796565b9392505050565b6000806000606084860312156107e957600080fd5b6107f284610796565b925061080060208501610796565b915061080e60408501610796565b90509250925092565b60008060006060848603121561082c57600080fd5b61083584610796565b925061084360208501610796565b9150604084013590509250925092565b6000806040838503121561086657600080fd5b61086f83610796565b946020939093013593505050565b60006020828403121561088f57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156108eb5783516001600160a01b0316835292840192918401916001016108c6565b50909695505050505050565b602080825260059082015264475332303160d81b604082015260600190565b602080825260059082015264475332303360d81b604082015260600190565b60208082526005908201526411d4cc8c0d60da1b604082015260600190565b602080825260059082015264475332303560d81b604082015260600190565b600082821015610985576109856109bc565b500390565b600081610999576109996109bc565b506000190190565b60006000198214156109b5576109b56109bc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122081bff5b360123add8bb72c6f5e85f2f8a83f4306fbe2c0123d88719b954e556a64736f6c63430008070033";

type OwnerManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnerManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnerManager__factory extends ContractFactory {
  constructor(...args: OwnerManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OwnerManager> {
    return super.deploy(overrides || {}) as Promise<OwnerManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OwnerManager {
    return super.attach(address) as OwnerManager;
  }
  override connect(signer: Signer): OwnerManager__factory {
    return super.connect(signer) as OwnerManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnerManagerInterface {
    return new utils.Interface(_abi) as OwnerManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnerManager {
    return new Contract(address, _abi, signerOrProvider) as OwnerManager;
  }
}
