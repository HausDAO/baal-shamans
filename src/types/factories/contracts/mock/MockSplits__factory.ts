/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockSplits,
  MockSplitsInterface,
} from "../../../contracts/mock/MockSplits";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "split",
        type: "address",
      },
    ],
    name: "acceptControl",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "split",
        type: "address",
      },
    ],
    name: "cancelControlTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "percentAllocations",
        type: "uint32[]",
      },
      {
        internalType: "uint32",
        name: "distributorsFee",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "createSplit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "split",
        type: "address",
      },
      {
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "transferControl",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "split",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "percentAllocations",
        type: "uint32[]",
      },
      {
        internalType: "uint32",
        name: "distributorsFee",
        type: "uint32",
      },
    ],
    name: "updateSplit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103a8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631267c6da1461005c5780637601f7821461006f578063c7de64401461005c578063d0e4b2f414610083578063ecef0ace14610095575b600080fd5b61006d61006a3660046101b3565b50565b005b61006d61007d36600461028d565b50505050565b61006d6100913660046101d5565b5050565b61006d61007d366004610208565b80356001600160a01b03811681146100ba57600080fd5b919050565b600082601f8301126100d057600080fd5b813560206100e56100e083610338565b610307565b80838252828201915082860187848660051b890101111561010557600080fd5b60005b8581101561012b57610119826100a3565b84529284019290840190600101610108565b5090979650505050505050565b600082601f83011261014957600080fd5b813560206101596100e083610338565b80838252828201915082860187848660051b890101111561017957600080fd5b60005b8581101561012b5761018d8261019f565b8452928401929084019060010161017c565b803563ffffffff811681146100ba57600080fd5b6000602082840312156101c557600080fd5b6101ce826100a3565b9392505050565b600080604083850312156101e857600080fd5b6101f1836100a3565b91506101ff602084016100a3565b90509250929050565b6000806000806080858703121561021e57600080fd5b610227856100a3565b9350602085013567ffffffffffffffff8082111561024457600080fd5b610250888389016100bf565b9450604087013591508082111561026657600080fd5b5061027387828801610138565b9250506102826060860161019f565b905092959194509250565b600080600080608085870312156102a357600080fd5b843567ffffffffffffffff808211156102bb57600080fd5b6102c7888389016100bf565b955060208701359150808211156102dd57600080fd5b506102ea87828801610138565b9350506102f96040860161019f565b9150610282606086016100a3565b604051601f8201601f1916810167ffffffffffffffff811182821017156103305761033061035c565b604052919050565b600067ffffffffffffffff8211156103525761035261035c565b5060051b60200190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a79a818b2351eab3f0cd85ea549e2ae7b3fc17f463c20cad16054f24840b551a64736f6c63430008070033";

type MockSplitsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSplitsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSplits__factory extends ContractFactory {
  constructor(...args: MockSplitsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockSplits> {
    return super.deploy(overrides || {}) as Promise<MockSplits>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockSplits {
    return super.attach(address) as MockSplits;
  }
  override connect(signer: Signer): MockSplits__factory {
    return super.connect(signer) as MockSplits__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSplitsInterface {
    return new utils.Interface(_abi) as MockSplitsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSplits {
    return new Contract(address, _abi, signerOrProvider) as MockSplits;
  }
}
