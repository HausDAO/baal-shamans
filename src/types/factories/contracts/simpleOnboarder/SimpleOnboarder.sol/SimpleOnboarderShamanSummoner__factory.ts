/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SimpleOnboarderShamanSummoner,
  SimpleOnboarderShamanSummonerInterface,
} from "../../../../contracts/simpleOnboarder/SimpleOnboarder.sol/SimpleOnboarderShamanSummoner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_template",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "baal",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "onboarder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expiery",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "details",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_shares",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "_cuts",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
    ],
    name: "SummonSimpleOnboarder",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_moloch",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_expiery",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_shares",
        type: "bool",
      },
      {
        internalType: "address[]",
        name: "_cuts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
      {
        internalType: "string",
        name: "_details",
        type: "string",
      },
    ],
    name: "summonOnboarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "template",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106a13803806106a183398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61060e806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806368ed5a631461003b5780636f2ddd931461006a575b600080fd5b61004e610049366004610331565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b60005461004e906001600160a01b031681565b600080548190610095906001600160a01b031661015c565b604051632e94ff0160e21b81529091506001600160a01b0382169063ba53fc04906100ce908d908d908d908d908d908d90600401610473565b600060405180830381600087803b1580156100e857600080fd5b505af11580156100fc573d6000803e3d6000fd5b50505050896001600160a01b03167f716425a544f9d419ec5b067f776fba0f474f42e5369c55046aeab705bdd35fe9828b8b88888d8d8d6040516101479897969594939291906104cd565b60405180910390a29998505050505050505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166101f85760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b600082601f83011261020e57600080fd5b8135602061022361021e83610586565b610555565b80838252828201915082860187848660051b890101111561024357600080fd5b60005b8581101561026b578135610259816105c0565b84529284019290840190600101610246565b5090979650505050505050565b600082601f83011261028957600080fd5b8135602061029961021e83610586565b80838252828201915082860187848660051b89010111156102b957600080fd5b60005b8581101561026b578135845292840192908401906001016102bc565b803580151581146101f857600080fd5b60008083601f8401126102fa57600080fd5b50813567ffffffffffffffff81111561031257600080fd5b60208301915083602082850101111561032a57600080fd5b9250929050565b60008060008060008060008060e0898b03121561034d57600080fd5b8835610358816105c0565b97506020890135610368816105c0565b96506040890135955061037d60608a016102d8565b9450608089013567ffffffffffffffff8082111561039a57600080fd5b6103a68c838d016101fd565b955060a08b01359150808211156103bc57600080fd5b6103c88c838d01610278565b945060c08b01359150808211156103de57600080fd5b506103eb8b828c016102e8565b999c989b5096995094979396929594505050565b600081518084526020808501945080840160005b838110156104385781516001600160a01b031687529582019590820190600101610413565b509495945050505050565b600081518084526020808501945080840160005b8381101561043857815187529582019590820190600101610457565b6001600160a01b0387811682528616602082015260408101859052831515606082015260c0608082018190526000906104ae908301856103ff565b82810360a08401526104c08185610443565b9998505050505050505050565b6001600160a01b038981168252881660208201526040810187905260e0606082018190528101859052600061010086888285013760008388018201528515156080840152601f8701601f19168301838103820160a0850152610531818301876103ff565b91505082810360c08401526105468185610443565b9b9a5050505050505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561057e5761057e6105aa565b604052919050565b600067ffffffffffffffff8211156105a0576105a06105aa565b5060051b60200190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146105d557600080fd5b5056fea2646970667358221220655b6f4292a78eaa208eba3268fb65da98e4813b7596709027271c6532f7783564736f6c63430008070033";

type SimpleOnboarderShamanSummonerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleOnboarderShamanSummonerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleOnboarderShamanSummoner__factory extends ContractFactory {
  constructor(...args: SimpleOnboarderShamanSummonerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _template: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleOnboarderShamanSummoner> {
    return super.deploy(
      _template,
      overrides || {}
    ) as Promise<SimpleOnboarderShamanSummoner>;
  }
  override getDeployTransaction(
    _template: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_template, overrides || {});
  }
  override attach(address: string): SimpleOnboarderShamanSummoner {
    return super.attach(address) as SimpleOnboarderShamanSummoner;
  }
  override connect(signer: Signer): SimpleOnboarderShamanSummoner__factory {
    return super.connect(signer) as SimpleOnboarderShamanSummoner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleOnboarderShamanSummonerInterface {
    return new utils.Interface(_abi) as SimpleOnboarderShamanSummonerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleOnboarderShamanSummoner {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SimpleOnboarderShamanSummoner;
  }
}
