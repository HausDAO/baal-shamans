/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  StakeClaimShamanSummoner,
  StakeClaimShamanSummonerInterface,
} from "../../../../contracts/stakeclaims/StakeClaims.sol/StakeClaimShamanSummoner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_template",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "baal",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "stakeClaim",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isShares",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expiery",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "multiplier",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "details",
        type: "string",
      },
    ],
    name: "SummonStakeClaim",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_moloch",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stakeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isShares",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_expiery",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_multiplier",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_details",
        type: "string",
      },
    ],
    name: "summonStakeClaim",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "template",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161048238038061048283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6103ef806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636f2ddd931461003b578063a7dfdfa81461006a575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61004e61007836600461027c565b600080548190610090906001600160a01b03166101c4565b604051632ab4d11360e01b81526001600160a01b038c811660048301528b811660248301528915156044830152606482018990526084820188905291925090821690632ab4d1139060a401600060405180830381600087803b1580156100f557600080fd5b505af1158015610109573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b038b811660048301528416925063f2fde38b9150602401600060405180830381600087803b15801561015057600080fd5b505af1158015610164573d6000803e3d6000fd5b50505050896001600160a01b03167f42230441c20b8fbe86aeeb15f64bcae45499508ee2e96141d443dd0ed59664e4828b8b8b8b8b8b8b6040516101af98979695949392919061034b565b60405180910390a29998505050505050505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166102605760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b80356001600160a01b038116811461026057600080fd5b60008060008060008060008060e0898b03121561029857600080fd5b6102a189610265565b97506102af60208a01610265565b96506102bd60408a01610265565b9550606089013580151581146102d257600080fd5b94506080890135935060a0890135925060c089013567ffffffffffffffff808211156102fd57600080fd5b818b0191508b601f83011261031157600080fd5b81358181111561032057600080fd5b8c602082850101111561033257600080fd5b6020830194508093505050509295985092959890939650565b6001600160a01b03898116825288811660208301528716604082015285151560608201526080810185905260a0810184905260e060c08201819052810182905260006101008385828501376000838501820152601f909301601f19169091019091019897505050505050505056fea26469706673582212207ae26cc234825a13b414f9a338f6629be86c2666f727daf5ecb5f10b56b1edc264736f6c63430008070033";

type StakeClaimShamanSummonerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeClaimShamanSummonerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeClaimShamanSummoner__factory extends ContractFactory {
  constructor(...args: StakeClaimShamanSummonerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _template: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StakeClaimShamanSummoner> {
    return super.deploy(
      _template,
      overrides || {}
    ) as Promise<StakeClaimShamanSummoner>;
  }
  override getDeployTransaction(
    _template: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_template, overrides || {});
  }
  override attach(address: string): StakeClaimShamanSummoner {
    return super.attach(address) as StakeClaimShamanSummoner;
  }
  override connect(signer: Signer): StakeClaimShamanSummoner__factory {
    return super.connect(signer) as StakeClaimShamanSummoner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeClaimShamanSummonerInterface {
    return new utils.Interface(_abi) as StakeClaimShamanSummonerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakeClaimShamanSummoner {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StakeClaimShamanSummoner;
  }
}
