/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SecondsUpdater,
  SecondsUpdaterInterface,
} from "../../../../contracts/memberRegistry/SecondsUpdater.sol/SecondsUpdater";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "member",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "newActivity",
        type: "uint32",
      },
    ],
    name: "UpdateMemberActivity",
    type: "event",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract IREGISTRY",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "update",
    outputs: [
      {
        internalType: "uint32",
        name: "currentUpdate",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161060f38038061060f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61057c806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637b1039991461003b578063a2e620451461006b575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610073610088565b60405163ffffffff9091168152602001610062565b6000805460408051639eab525360e01b815290514293926001600160a01b031691639eab52539160048083019286929190829003018183875af11580156100d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100fb9190810190610350565b905060005b81518110156102c257600082828151811061011d5761011d61045d565b602002602001015190506000816020015163ffffffff1660000361015157606082015161014a9086610489565b90506101d5565b60008054906101000a90046001600160a01b03166001600160a01b031663c04637116040518163ffffffff1660e01b81526004016020604051808303816000875af11580156101a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c891906104ae565b6101d29086610489565b90505b600060648360400151836101e991906104d0565b6101f391906104fc565b600054845160405163adcda10760e01b81526001600160a01b03918216600482015263ffffffff84166024820152929350169063adcda10790604401600060405180830381600087803b15801561024957600080fd5b505af115801561025d573d6000803e3d6000fd5b50508451604080516001600160a01b03909216825263ffffffff851660208301527f127246a9cf18b51a37c710bcea364145b954fe53e6957ad9e98a48a2b43adfaf935001905060405180910390a150505080806102ba9061052d565b915050610100565b505090565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610300576103006102c7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561032f5761032f6102c7565b604052919050565b805163ffffffff8116811461034b57600080fd5b919050565b6000602080838503121561036357600080fd5b825167ffffffffffffffff8082111561037b57600080fd5b818501915085601f83011261038f57600080fd5b8151818111156103a1576103a16102c7565b6103af848260051b01610306565b818152848101925060079190911b8301840190878211156103cf57600080fd5b928401925b8184101561045257608084890312156103ed5760008081fd5b6103f56102dd565b84516001600160a01b038116811461040d5760008081fd5b815261041a858701610337565b86820152604061042b818701610337565b90820152606061043c868201610337565b90820152835260809390930192918401916103d4565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff838116908316818110156104a6576104a6610473565b039392505050565b6000602082840312156104c057600080fd5b6104c982610337565b9392505050565b600063ffffffff808316818516818304811182151516156104f3576104f3610473565b02949350505050565b600063ffffffff8084168061052157634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001820161053f5761053f610473565b506001019056fea2646970667358221220172a753d04a183bc32a552e0b3634f9b10898d894be6d50f5a2635b7e9ee48c764736f6c634300080d0033";

type SecondsUpdaterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SecondsUpdaterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SecondsUpdater__factory extends ContractFactory {
  constructor(...args: SecondsUpdaterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SecondsUpdater> {
    return super.deploy(_registry, overrides || {}) as Promise<SecondsUpdater>;
  }
  override getDeployTransaction(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  override attach(address: string): SecondsUpdater {
    return super.attach(address) as SecondsUpdater;
  }
  override connect(signer: Signer): SecondsUpdater__factory {
    return super.connect(signer) as SecondsUpdater__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SecondsUpdaterInterface {
    return new utils.Interface(_abi) as SecondsUpdaterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SecondsUpdater {
    return new Contract(address, _abi, signerOrProvider) as SecondsUpdater;
  }
}
