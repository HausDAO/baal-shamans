/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PGRegistry,
  PGRegistryInterface,
} from "../../../contracts/memberRegistry/PGRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_moloch",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "UD60x18",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__SqrtOverflow",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "secondsActive",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "activityMultiplier",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "startDate",
            type: "uint32",
          },
        ],
        indexed: false,
        internalType: "struct MemberRegistry.Member",
        name: "member",
        type: "tuple",
      },
    ],
    name: "SetMember",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "Trigger",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "Update",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "secondsActive",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "activityMultiplier",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "startDate",
            type: "uint32",
          },
        ],
        indexed: false,
        internalType: "struct MemberRegistry.Member",
        name: "member",
        type: "tuple",
      },
    ],
    name: "UpdateMember",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "_activityMultipliers",
        type: "uint32[]",
      },
      {
        internalType: "uint32[]",
        name: "_startDates",
        type: "uint32[]",
      },
    ],
    name: "batchNewMember",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_members",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "_activityMultipliers",
        type: "uint32[]",
      },
    ],
    name: "batchUpdateMember",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTrigger",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdate",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "memberIdxs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "members",
    outputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "secondsActive",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "activityMultiplier",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "startDate",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "moloch",
    outputs: [
      {
        internalType: "contract IBAAL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_member",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_activityMultiplier",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "_startDate",
        type: "uint32",
      },
    ],
    name: "setNewMember",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shares",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "trigger",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_member",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_activityMultiplier",
        type: "uint32",
      },
    ],
    name: "updateMember",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateSecondsActive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600160025534801561001557600080fd5b50604051620016b6380380620016b683398101604081905261003691610149565b61003f336100f7565b600580546001600160a01b0319166001600160a01b03831690811790915560408051638009ba1f60e01b81529051638009ba1f916004808201926020929091908290030181865afa158015610098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bc9190610149565b600680546001600160a01b0319166001600160a01b0392909216919091179055506000805463ffffffff19164263ffffffff16179055610179565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561015b57600080fd5b81516001600160a01b038116811461017257600080fd5b9392505050565b61152d80620001896000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063c818c70f11610071578063c818c70f1461024e578063cf2933c114610261578063e46867fd14610274578063e4a7c60314610287578063f2fde38b1461028f57600080fd5b8063715018a61461021d5780637fec8d38146102255780638da5cb5b1461022d578063c04637111461023e57600080fd5b80635daf08ca116100de5780635daf08ca1461018c578063623d9ac9146101d5578063666da64f146101e85780636ff60301146101f057600080fd5b806303314efa1461011057806306661abd146101405780630726312a1461015757806334e2fc651461016c575b600080fd5b600654610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014960025481565b604051908152602001610137565b61016a610165366004611019565b6102a2565b005b61014961017a36600461105c565b60036020526000908152604090205481565b61019f61019a366004611077565b6102ba565b604080516001600160a01b03909516855263ffffffff938416602086015291831691840191909152166060820152608001610137565b600554610123906001600160a01b031681565b61016a610307565b60005461020890640100000000900463ffffffff1681565b60405163ffffffff9091168152602001610137565b61016a610427565b61016a610439565b6004546001600160a01b0316610123565b6000546102089063ffffffff1681565b61016a61025c366004611090565b61055b565b61016a61026f366004611202565b610571565b61016a610282366004611266565b6105d4565b61016a610656565b61016a61029d36600461105c565b61075c565b6102aa6107d5565b6102b583838361082f565b505050565b600181815481106102ca57600080fd5b6000918252602090912001546001600160a01b038116915063ffffffff600160a01b8204811691600160c01b8104821691600160e01b9091041684565b336000908152600360205260409020546103685760405162461bcd60e51b815260206004820152601760248201527f6e6f7420612072656769737465726564206d656d62657200000000000000000060448201526064015b60405180910390fd5b6006546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d491906112ee565b156104135760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e4818db185a5b5959608a1b604482015260640161035f565b61042533670de0b6b3a76400006109d7565b565b61042f6107d5565b6104256000610ad3565b60015460009067ffffffffffffffff811115610457576104576110c3565b604051908082528060200260200182016040528015610480578160200160208202803683370190505b50905060005b6001548110156104ef576104c0600182815481106104a6576104a6611307565b6000918252602090912001546001600160a01b0316610b25565b8282815181106104d2576104d2611307565b6020908102919091010152806104e781611333565b915050610486565b506104f981610b4c565b506000805467ffffffff0000000019166401000000004263ffffffff9081168202929092179283905560405192041681527f1020408d3477db49d8e75ad900fc71f6048f4a38140cbfef8eefdd3354527c7c906020015b60405180910390a150565b6105636107d5565b61056d8282610c1a565b5050565b6105796107d5565b60005b6001548110156102b5576105c283828151811061059b5761059b611307565b60200260200101518383815181106105b5576105b5611307565b6020026020010151610c1a565b806105cc81611333565b91505061057c565b6105dc6107d5565b60005b83518110156106505761063e8482815181106105fd576105fd611307565b602002602001015184838151811061061757610617611307565b602002602001015184848151811061063157610631611307565b602002602001015161082f565b8061064881611333565b9150506105df565b50505050565b6000805461066a9063ffffffff164261134c565b905060005b6001548110156107135760006001828154811061068e5761068e611307565b600091825260209091200180549091506064906106b890600160c01b900463ffffffff1685611371565b6106c291906113b3565b815482906014906106e1908490600160a01b900463ffffffff166113e4565b92506101000a81548163ffffffff021916908363ffffffff16021790555050808061070b90611333565b91505061066f565b506000805463ffffffff19164263ffffffff169081179091556040519081527f5624889e22dfb82f30d92d6882aecff897f9f67a4a4d224257d424d2420ee8c090602001610550565b6107646107d5565b6001600160a01b0381166107c95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035f565b6107d281610ad3565b50565b6004546001600160a01b031633146104255760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035f565b6001600160a01b0383166000908152600360205260409020541561088a5760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b604482015260640161035f565b60016040518060800160405280856001600160a01b0316815260200183426108b2919061134c565b63ffffffff9081168252858116602080840191909152858216604093840152845460018181018755600096875282872086519201805487850151888801516060909901518716600160e01b026001600160e01b03998816600160c01b02999099166001600160c01b0391909716600160a01b026001600160c01b03199092166001600160a01b03958616179190911716949094179590951790925560025491881685526003905292208290557f96147d24d04685de4d5a739b930bf396ec59482c3903f8a924d2afe9c5fda9509161098b90829061140c565b8154811061099b5761099b611307565b906000526020600020016040516109b29190611423565b60405180910390a16001600260008282546109cd919061145b565b9091555050505050565b604080516001808252818301909252600091602080830190803683370190505090508281600081518110610a0d57610a0d611307565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610a5e57610a5e611307565b6020908102919091010152600554604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c90610a9b9085908590600401611473565b600060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b5050505050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080610b37610b3484610dac565b90565b9050610b45610b3482610e20565b9392505050565b600080825167ffffffffffffffff811115610b6957610b696110c3565b604051908082528060200260200182016040528015610b92578160200160208202803683370190505b50905060005b8351811015610c1057600060018281548110610bb657610bb6611307565b60009182526020909120015483516001600160a01b0390911691508190849084908110610be557610be5611307565b6001600160a01b03909216602092830291909101909101525080610c0881611333565b915050610b98565b5060019392505050565b6001600160a01b0382166000908152600360205260408120549003610c725760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd081c9959da5cdd195c995960921b604482015260640161035f565b60648163ffffffff161115610cc95760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964205f61637469766974794d756c7469706c6965720000000000604482015260640161035f565b6001600160a01b0382166000908152600360205260409020548190600190610cf290829061140c565b81548110610d0257610d02611307565b60009182526020808320909101805463ffffffff94909416600160c01b0263ffffffff60c01b19909416939093179092556001600160a01b0384168152600390915260409020547fea050be4bcbfcde9ad6f27bac00b8c6e51855eadfb116dc7542c267505071fb490600190610d7990829061140c565b81548110610d8957610d89611307565b90600052602060002001604051610da09190611423565b60405180910390a15050565b6001600160a01b038116600090815260036020526040812054816001610dd2818461140c565b81548110610de257610de2611307565b60009182526020909120018054909150610e129063ffffffff600160c01b8204811691600160a01b900416611371565b63ffffffff16949350505050565b6000817812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21811115610e6057604051636155b67d60e01b81526004810184905260240161035f565b610b45610b34670de0b6b3a76400008302600081600003610e8357506000919050565b50600181600160801b8110610e9d5760409190911b9060801c5b680100000000000000008110610eb85760209190911b9060401c5b6401000000008110610ecf5760109190911b9060201c5b620100008110610ee45760089190911b9060101c5b6101008110610ef85760049190911b9060081c5b60108110610f0b5760029190911b9060041c5b60048110610f1b57600182901b91505b6001828481610f2c57610f2c61139d565b048301901c91506001828481610f4457610f4461139d565b048301901c91506001828481610f5c57610f5c61139d565b048301901c91506001828481610f7457610f7461139d565b048301901c91506001828481610f8c57610f8c61139d565b048301901c91506001828481610fa457610fa461139d565b048301901c91506001828481610fbc57610fbc61139d565b048301901c91506000828481610fd457610fd461139d565b049050808310610fe2578092505b5050919050565b80356001600160a01b038116811461100057600080fd5b919050565b803563ffffffff8116811461100057600080fd5b60008060006060848603121561102e57600080fd5b61103784610fe9565b925061104560208501611005565b915061105360408501611005565b90509250925092565b60006020828403121561106e57600080fd5b610b4582610fe9565b60006020828403121561108957600080fd5b5035919050565b600080604083850312156110a357600080fd5b6110ac83610fe9565b91506110ba60208401611005565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611102576111026110c3565b604052919050565b600067ffffffffffffffff821115611124576111246110c3565b5060051b60200190565b600082601f83011261113f57600080fd5b8135602061115461114f8361110a565b6110d9565b82815260059290921b8401810191818101908684111561117357600080fd5b8286015b848110156111955761118881610fe9565b8352918301918301611177565b509695505050505050565b600082601f8301126111b157600080fd5b813560206111c161114f8361110a565b82815260059290921b840181019181810190868411156111e057600080fd5b8286015b84811015611195576111f581611005565b83529183019183016111e4565b6000806040838503121561121557600080fd5b823567ffffffffffffffff8082111561122d57600080fd5b6112398683870161112e565b9350602085013591508082111561124f57600080fd5b5061125c858286016111a0565b9150509250929050565b60008060006060848603121561127b57600080fd5b833567ffffffffffffffff8082111561129357600080fd5b61129f8783880161112e565b945060208601359150808211156112b557600080fd5b6112c1878388016111a0565b935060408601359150808211156112d757600080fd5b506112e4868287016111a0565b9150509250925092565b60006020828403121561130057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016113455761134561131d565b5060010190565b600063ffffffff838116908316818110156113695761136961131d565b039392505050565b600063ffffffff808316818516818304811182151516156113945761139461131d565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806113d857634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600063ffffffff8083168185168083038211156114035761140361131d565b01949350505050565b60008282101561141e5761141e61131d565b500390565b90546001600160a01b038116825263ffffffff60a082901c8116602084015260c082901c16604083015260e01c606082015260800190565b6000821982111561146e5761146e61131d565b500190565b604080825283519082018190526000906020906060840190828701845b828110156114b55781516001600160a01b031684529284019290840190600101611490565b5050508381038285015284518082528583019183019060005b818110156114ea578351835292840192918401916001016114ce565b509097965050505050505056fea264697066735822122071d6a890db3893002fa6b63070c85634155b6d96addece767a8a26622f74b1af64736f6c634300080d0033";

type PGRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PGRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PGRegistry__factory extends ContractFactory {
  constructor(...args: PGRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _moloch: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PGRegistry> {
    return super.deploy(_moloch, overrides || {}) as Promise<PGRegistry>;
  }
  override getDeployTransaction(
    _moloch: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_moloch, overrides || {});
  }
  override attach(address: string): PGRegistry {
    return super.attach(address) as PGRegistry;
  }
  override connect(signer: Signer): PGRegistry__factory {
    return super.connect(signer) as PGRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PGRegistryInterface {
    return new utils.Interface(_abi) as PGRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PGRegistry {
    return new Contract(address, _abi, signerOrProvider) as PGRegistry;
  }
}
