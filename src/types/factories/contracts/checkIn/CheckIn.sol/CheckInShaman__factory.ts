/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CheckInShaman,
  CheckInShamanInterface,
} from "../../../../contracts/checkIn/CheckIn.sol/CheckInShaman";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmountClaimed",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "secondsWorked",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "metadata",
        type: "string",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "baal",
    outputs: [
      {
        internalType: "contract IBAAL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkInInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_secondsWorked",
        type: "uint32",
      },
      {
        internalType: "string",
        name: "_metadata",
        type: "string",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_baal",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_sharesOrLoot",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_sharesPerSecond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_checkInInterval",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sharesOrLoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sharesPerSecond",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "timeLedger",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600055610abb806100256000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c8063081dd4b51461007d5780631502f9161461009f578063653e3f12146100b4578063acfb24b7146100c7578063bfd25fa5146100de578063d9ba10ec146100e7578063e5a2a2a514610107578063fc0c546a14610138575b600080fd5b60045461008a9060ff1681565b60405190151581526020015b60405180910390f35b6100b26100ad3660046108a0565b61014b565b005b6100b26100c236600461083c565b6103d0565b6100d060065481565b604051908152602001610096565b6100d060055481565b6100d06100f5366004610802565b60036020526000908152604090205481565b600154610120906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610096565b600254610120906001600160a01b031681565b6005548363ffffffff16106101cd5760405162461bcd60e51b815260206004820152603d60248201527f436c61696d61626c6520776f726b20706572696f64206d757374206265206c6560448201527f7373207468616e2074686520636865636b20696e20696e74657276616c00000060648201526084015b60405180910390fd5b600554336000908152600360205260409020546101ea9042610a2a565b101580610204575033600090815260036020526040902054155b61025b5760405162461bcd60e51b815260206004820152602260248201527f43616e206f6e6c7920636c61696d20312074696d652070657220696e74657276604482015261185b60f21b60648201526084016101c4565b6002546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561029f57600080fd5b505afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d79190610887565b1161035b5760405162461bcd60e51b815260206004820152604860248201527f4d656d62657273204f6e6c793a204d75737420686176652044414f20746f6b6560448201527f6e7320696e206f7264657220746f20636c61696d207468726f75676820746869606482015267399039b430b6b0b760c11b608482015260a4016101c4565b60006103698460065461066e565b90506103753382610687565b3360008181526003602052604090819020429081905590517f2ebb59539aa45aa293637015fa5189c8453acfe7d79f8467ca6d3332b7ddbb0f926103c2929091859089908990899061092e565b60405180910390a150505050565b600154610100900460ff16158080156103ed57506001805460ff16105b806104065750303b15801561040657506001805460ff16145b6104695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101c4565b6001805460ff191681179055801561048b576001805461ff0019166101001790555b6001805462010000600160b01b031916620100006001600160a01b038816021790556004805460ff191685151590811790915560ff161561057157600160029054906101000a90046001600160a01b03166001600160a01b0316638009ba1f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561051457600080fd5b505afa158015610528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054c919061081f565b600280546001600160a01b0319166001600160a01b0392909216919091179055610618565b600160029054906101000a90046001600160a01b03166001600160a01b031663f460124d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f7919061081f565b600280546001600160a01b0319166001600160a01b03929092169190911790555b600582905560068390558015610667576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60006106808263ffffffff8516610a0b565b9392505050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106106bd576106bd610a57565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050828160008151811061070e5761070e610a57565b602090810291909101015260045460ff161561079257600154604051632c78fd0360e21b8152620100009091046001600160a01b03169063b1e3f40c9061075b9085908590600401610987565b600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b505050506107fc565b6001546040516322936c2360e11b8152620100009091046001600160a01b031690634526d846906107c99085908590600401610987565b600060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050505b50505050565b60006020828403121561081457600080fd5b813561068081610a6d565b60006020828403121561083157600080fd5b815161068081610a6d565b6000806000806080858703121561085257600080fd5b843561085d81610a6d565b93506020850135801515811461087257600080fd5b93969395505050506040820135916060013590565b60006020828403121561089957600080fd5b5051919050565b6000806000604084860312156108b557600080fd5b833563ffffffff811681146108c957600080fd5b9250602084013567ffffffffffffffff808211156108e657600080fd5b818601915086601f8301126108fa57600080fd5b81358181111561090957600080fd5b87602082850101111561091b57600080fd5b6020830194508093505050509250925092565b60018060a01b038716815285602082015284604082015263ffffffff8416606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b604080825283519082018190526000906020906060840190828701845b828110156109c95781516001600160a01b0316845292840192908401906001016109a4565b5050508381038285015284518082528583019183019060005b818110156109fe578351835292840192918401916001016109e2565b5090979650505050505050565b6000816000190483118215151615610a2557610a25610a41565b500290565b600082821015610a3c57610a3c610a41565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610a8257600080fd5b5056fea2646970667358221220bdf4a1390599075285a8afd34a24bbe9ae18dadd35048f955801b823644c95ef64736f6c63430008070033";

type CheckInShamanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheckInShamanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CheckInShaman__factory extends ContractFactory {
  constructor(...args: CheckInShamanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CheckInShaman> {
    return super.deploy(overrides || {}) as Promise<CheckInShaman>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CheckInShaman {
    return super.attach(address) as CheckInShaman;
  }
  override connect(signer: Signer): CheckInShaman__factory {
    return super.connect(signer) as CheckInShaman__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckInShamanInterface {
    return new utils.Interface(_abi) as CheckInShamanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CheckInShaman {
    return new Contract(address, _abi, signerOrProvider) as CheckInShaman;
  }
}
