/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CheckInShaman,
  CheckInShamanInterface,
} from "../../../../contracts/checkIn/CheckIn.sol/CheckInShaman";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmountClaimed",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "minutesWorked",
        type: "uint32",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "baal",
    outputs: [
      {
        internalType: "contract IBAAL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkInInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_secondsWorked",
        type: "uint32",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_baal",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_sharesOrLoot",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_sharesPerSecond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_checkInInterval",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sharesOrLoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sharesPerSecond",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "timeLedger",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600055610a02806100256000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c8063049518911461007d578063081dd4b514610092578063653e3f12146100b4578063acfb24b7146100c7578063bfd25fa5146100de578063d9ba10ec146100e7578063e5a2a2a514610107578063fc0c546a14610138575b600080fd5b61009061008b3660046108a8565b61014b565b005b60045461009f9060ff1681565b60405190151581526020015b60405180910390f35b6100906100c2366004610844565b6103d8565b6100d060065481565b6040519081526020016100ab565b6100d060055481565b6100d06100f536600461080a565b60036020526000908152604090205481565b600154610120906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100ab565b600254610120906001600160a01b031681565b6005548163ffffffff16106101cd5760405162461bcd60e51b815260206004820152603d60248201527f436c61696d61626c6520776f726b20706572696f64206d757374206265206c6560448201527f7373207468616e2074686520636865636b20696e20696e74657276616c00000060648201526084015b60405180910390fd5b600554336000908152600360205260409020546101ea9042610971565b101580610204575033600090815260036020526040902054155b61025b5760405162461bcd60e51b815260206004820152602260248201527f43616e206f6e6c7920636c61696d20312074696d652070657220696e74657276604482015261185b60f21b60648201526084016101c4565b6002546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561029f57600080fd5b505afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d7919061088f565b1161035b5760405162461bcd60e51b815260206004820152604860248201527f4d656d62657273204f6e6c793a204d75737420686176652044414f20746f6b6560448201527f6e7320696e206f7264657220746f20636c61696d207468726f75676820746869606482015267399039b430b6b0b760c11b608482015260a4016101c4565b600061036982600654610676565b9050610375338261068f565b336000818152600360209081526040918290204290819055825193845290830152810182905263ffffffff831660608201527f75dc787a02f918aebd9908a3df4c9f233a7c4f0590a7ccddec797ff8d79a7bcb9060800160405180910390a15050565b600154610100900460ff16158080156103f557506001805460ff16105b8061040e5750303b15801561040e57506001805460ff16145b6104715760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101c4565b6001805460ff1916811790558015610493576001805461ff0019166101001790555b6001805462010000600160b01b031916620100006001600160a01b038816021790556004805460ff191685151590811790915560ff161561057957600160029054906101000a90046001600160a01b03166001600160a01b0316638009ba1f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561051c57600080fd5b505afa158015610530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105549190610827565b600280546001600160a01b0319166001600160a01b0392909216919091179055610620565b600160029054906101000a90046001600160a01b03166001600160a01b031663f460124d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c757600080fd5b505afa1580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff9190610827565b600280546001600160a01b0319166001600160a01b03929092169190911790555b60058290556006839055801561066f576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60006106888263ffffffff8516610952565b9392505050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106106c5576106c561099e565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905082816000815181106107165761071661099e565b602090810291909101015260045460ff161561079a57600154604051632c78fd0360e21b8152620100009091046001600160a01b03169063b1e3f40c9061076390859085906004016108ce565b600060405180830381600087803b15801561077d57600080fd5b505af1158015610791573d6000803e3d6000fd5b50505050610804565b6001546040516322936c2360e11b8152620100009091046001600160a01b031690634526d846906107d190859085906004016108ce565b600060405180830381600087803b1580156107eb57600080fd5b505af11580156107ff573d6000803e3d6000fd5b505050505b50505050565b60006020828403121561081c57600080fd5b8135610688816109b4565b60006020828403121561083957600080fd5b8151610688816109b4565b6000806000806080858703121561085a57600080fd5b8435610865816109b4565b93506020850135801515811461087a57600080fd5b93969395505050506040820135916060013590565b6000602082840312156108a157600080fd5b5051919050565b6000602082840312156108ba57600080fd5b813563ffffffff8116811461068857600080fd5b604080825283519082018190526000906020906060840190828701845b828110156109105781516001600160a01b0316845292840192908401906001016108eb565b5050508381038285015284518082528583019183019060005b8181101561094557835183529284019291840191600101610929565b5090979650505050505050565b600081600019048311821515161561096c5761096c610988565b500290565b60008282101561098357610983610988565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146109c957600080fd5b5056fea2646970667358221220de0832f9979f6f2a6c2e9f5e1c761e8febe2e620263b73efc3573bb41bff413e64736f6c63430008070033";

type CheckInShamanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheckInShamanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CheckInShaman__factory extends ContractFactory {
  constructor(...args: CheckInShamanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CheckInShaman> {
    return super.deploy(overrides || {}) as Promise<CheckInShaman>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CheckInShaman {
    return super.attach(address) as CheckInShaman;
  }
  override connect(signer: Signer): CheckInShaman__factory {
    return super.connect(signer) as CheckInShaman__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckInShamanInterface {
    return new utils.Interface(_abi) as CheckInShamanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CheckInShaman {
    return new Contract(address, _abi, signerOrProvider) as CheckInShaman;
  }
}
