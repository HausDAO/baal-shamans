/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CheckInShaman,
  CheckInShamanInterface,
} from "../../../../contracts/checkIn/CheckIn.sol/CheckInShaman";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmountClaimed",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "minutesWorked",
        type: "uint16",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "baal",
    outputs: [
      {
        internalType: "contract IBAAL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkInInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_secondsWorked",
        type: "uint16",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_baal",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_sharesOrLoot",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_sharesPerSecond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_checkInInterval",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sharesOrLoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sharesPerSecond",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "timeLedger",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600081905554610100900460ff161580801561003357506001805460ff16105b8061005d575061004c3061013160201b6106791760201c565b15801561005d57506001805460ff16145b6100c45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6001805460ff19168117905580156100e6576001805461ff0019166101001790555b801561012b576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50610140565b6001600160a01b03163b151590565b610a108061014f6000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c8063081dd4b51461007d578063653e3f121461009f578063acfb24b7146100b4578063bfd25fa5146100cb578063d9ba10ec146100d4578063e5a2a2a5146100f4578063edac5f3e14610125578063fc0c546a14610138575b600080fd5b60045461008a9060ff1681565b60405190151581526020015b60405180910390f35b6100b26100ad366004610854565b61014b565b005b6100bd60065481565b604051908152602001610096565b6100bd60055481565b6100bd6100e236600461081a565b60036020526000908152604090205481565b60015461010d906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610096565b6100b261013336600461089f565b6103f5565b60025461010d906001600160a01b031681565b600154610100900460ff161580801561016857506001805460ff16105b80610188575061017730610679565b15801561018857506001805460ff16145b6101f05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6001805460ff1916811790558015610212576001805461ff0019166101001790555b6001805462010000600160b01b031916620100006001600160a01b038816021790556004805460ff191685151590811790915560ff16156102f857600160029054906101000a90046001600160a01b03166001600160a01b0316638009ba1f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029b57600080fd5b505afa1580156102af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d39190610837565b600280546001600160a01b0319166001600160a01b039290921691909117905561039f565b600160029054906101000a90046001600160a01b03166001600160a01b031663f460124d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e9190610837565b600280546001600160a01b0319166001600160a01b03929092169190911790555b6005829055600683905580156103ee576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6005548161ffff16106104705760405162461bcd60e51b815260206004820152603d60248201527f436c61696d61626c6520776f726b20706572696f64206d757374206265206c6560448201527f7373207468616e2074686520636865636b20696e20696e74657276616c00000060648201526084016101e7565b6005543360009081526003602052604090205461048d904261097f565b1015806104a7575033600090815260036020526040902054155b6104fe5760405162461bcd60e51b815260206004820152602260248201527f43616e206f6e6c7920636c61696d20312074696d652070657220696e74657276604482015261185b60f21b60648201526084016101e7565b6002546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561054257600080fd5b505afa158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a91906108c3565b116105fe5760405162461bcd60e51b815260206004820152604860248201527f4d656d62657273204f6e6c793a204d75737420686176652044414f20746f6b6560448201527f6e7320696e206f7264657220746f20636c61696d207468726f75676820746869606482015267399039b430b6b0b760c11b608482015260a4016101e7565b600061060c82600654610688565b9050610618338261069f565b336000818152600360209081526040918290204290819055825193845290830152810182905261ffff831660608201527f74b05a0ce245770b9bbd0cc3a0f6cd5a264da2d9da736b30edc62a7c88d3cb9b9060800160405180910390a15050565b6001600160a01b03163b151590565b60006106988261ffff8516610960565b9392505050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106106d5576106d56109ac565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610726576107266109ac565b602090810291909101015260045460ff16156107aa57600154604051632c78fd0360e21b8152620100009091046001600160a01b03169063b1e3f40c9061077390859085906004016108dc565b600060405180830381600087803b15801561078d57600080fd5b505af11580156107a1573d6000803e3d6000fd5b50505050610814565b6001546040516322936c2360e11b8152620100009091046001600160a01b031690634526d846906107e190859085906004016108dc565b600060405180830381600087803b1580156107fb57600080fd5b505af115801561080f573d6000803e3d6000fd5b505050505b50505050565b60006020828403121561082c57600080fd5b8135610698816109c2565b60006020828403121561084957600080fd5b8151610698816109c2565b6000806000806080858703121561086a57600080fd5b8435610875816109c2565b93506020850135801515811461088a57600080fd5b93969395505050506040820135916060013590565b6000602082840312156108b157600080fd5b813561ffff8116811461069857600080fd5b6000602082840312156108d557600080fd5b5051919050565b604080825283519082018190526000906020906060840190828701845b8281101561091e5781516001600160a01b0316845292840192908401906001016108f9565b5050508381038285015284518082528583019183019060005b8181101561095357835183529284019291840191600101610937565b5090979650505050505050565b600081600019048311821515161561097a5761097a610996565b500290565b60008282101561099157610991610996565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146109d757600080fd5b5056fea2646970667358221220ed1dfeb95119d65575e4688ed04d882229b576643a4ff37bb53f7a05ec120b7164736f6c63430008070033";

type CheckInShamanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheckInShamanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CheckInShaman__factory extends ContractFactory {
  constructor(...args: CheckInShamanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CheckInShaman> {
    return super.deploy(overrides || {}) as Promise<CheckInShaman>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CheckInShaman {
    return super.attach(address) as CheckInShaman;
  }
  override connect(signer: Signer): CheckInShaman__factory {
    return super.connect(signer) as CheckInShaman__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckInShamanInterface {
    return new utils.Interface(_abi) as CheckInShamanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CheckInShaman {
    return new Contract(address, _abi, signerOrProvider) as CheckInShaman;
  }
}
