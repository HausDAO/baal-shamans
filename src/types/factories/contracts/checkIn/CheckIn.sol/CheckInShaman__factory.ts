/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CheckInShaman,
  CheckInShamanInterface,
} from "../../../../contracts/checkIn/CheckIn.sol/CheckInShaman";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmountClaimed",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "minutesWorked",
        type: "uint32",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "baal",
    outputs: [
      {
        internalType: "contract IBAAL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkInInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_secondsWorked",
        type: "uint32",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_baal",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_sharesOrLoot",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_sharesPerSecond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_checkInInterval",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sharesOrLoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sharesPerSecond",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "timeLedger",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600081905554610100900460ff161580801561003357506001805460ff16105b8061005d575061004c3061013160201b61067d1760201c565b15801561005d57506001805460ff16145b6100c45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6001805460ff19168117905580156100e6576001805461ff0019166101001790555b801561012b576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50610140565b6001600160a01b03163b151590565b610a188061014f6000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c8063049518911461007d578063081dd4b514610092578063653e3f12146100b4578063acfb24b7146100c7578063bfd25fa5146100de578063d9ba10ec146100e7578063e5a2a2a514610107578063fc0c546a14610138575b600080fd5b61009061008b3660046108be565b61014b565b005b60045461009f9060ff1681565b60405190151581526020015b60405180910390f35b6100906100c236600461085a565b6103d8565b6100d060065481565b6040519081526020016100ab565b6100d060055481565b6100d06100f5366004610820565b60036020526000908152604090205481565b600154610120906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100ab565b600254610120906001600160a01b031681565b6005548163ffffffff16106101cd5760405162461bcd60e51b815260206004820152603d60248201527f436c61696d61626c6520776f726b20706572696f64206d757374206265206c6560448201527f7373207468616e2074686520636865636b20696e20696e74657276616c00000060648201526084015b60405180910390fd5b600554336000908152600360205260409020546101ea9042610987565b101580610204575033600090815260036020526040902054155b61025b5760405162461bcd60e51b815260206004820152602260248201527f43616e206f6e6c7920636c61696d20312074696d652070657220696e74657276604482015261185b60f21b60648201526084016101c4565b6002546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561029f57600080fd5b505afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d791906108a5565b1161035b5760405162461bcd60e51b815260206004820152604860248201527f4d656d62657273204f6e6c793a204d75737420686176652044414f20746f6b6560448201527f6e7320696e206f7264657220746f20636c61696d207468726f75676820746869606482015267399039b430b6b0b760c11b608482015260a4016101c4565b60006103698260065461068c565b905061037533826106a5565b336000818152600360209081526040918290204290819055825193845290830152810182905263ffffffff831660608201527f75dc787a02f918aebd9908a3df4c9f233a7c4f0590a7ccddec797ff8d79a7bcb9060800160405180910390a15050565b600154610100900460ff16158080156103f557506001805460ff16105b8061041557506104043061067d565b15801561041557506001805460ff16145b6104785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101c4565b6001805460ff191681179055801561049a576001805461ff0019166101001790555b6001805462010000600160b01b031916620100006001600160a01b038816021790556004805460ff191685151590811790915560ff161561058057600160029054906101000a90046001600160a01b03166001600160a01b0316638009ba1f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561052357600080fd5b505afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b919061083d565b600280546001600160a01b0319166001600160a01b0392909216919091179055610627565b600160029054906101000a90046001600160a01b03166001600160a01b031663f460124d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610606919061083d565b600280546001600160a01b0319166001600160a01b03929092169190911790555b600582905560068390558015610676576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03163b151590565b600061069e8263ffffffff8516610968565b9392505050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106106db576106db6109b4565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050828160008151811061072c5761072c6109b4565b602090810291909101015260045460ff16156107b057600154604051632c78fd0360e21b8152620100009091046001600160a01b03169063b1e3f40c9061077990859085906004016108e4565b600060405180830381600087803b15801561079357600080fd5b505af11580156107a7573d6000803e3d6000fd5b5050505061081a565b6001546040516322936c2360e11b8152620100009091046001600160a01b031690634526d846906107e790859085906004016108e4565b600060405180830381600087803b15801561080157600080fd5b505af1158015610815573d6000803e3d6000fd5b505050505b50505050565b60006020828403121561083257600080fd5b813561069e816109ca565b60006020828403121561084f57600080fd5b815161069e816109ca565b6000806000806080858703121561087057600080fd5b843561087b816109ca565b93506020850135801515811461089057600080fd5b93969395505050506040820135916060013590565b6000602082840312156108b757600080fd5b5051919050565b6000602082840312156108d057600080fd5b813563ffffffff8116811461069e57600080fd5b604080825283519082018190526000906020906060840190828701845b828110156109265781516001600160a01b031684529284019290840190600101610901565b5050508381038285015284518082528583019183019060005b8181101561095b5783518352928401929184019160010161093f565b5090979650505050505050565b60008160001904831182151516156109825761098261099e565b500290565b6000828210156109995761099961099e565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146109df57600080fd5b5056fea26469706673582212206a1a6979ce9e66a240bb60f17ba577983fe3653a6d6e9570c7c7e5a9c2489bfc64736f6c63430008070033";

type CheckInShamanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheckInShamanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CheckInShaman__factory extends ContractFactory {
  constructor(...args: CheckInShamanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CheckInShaman> {
    return super.deploy(overrides || {}) as Promise<CheckInShaman>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CheckInShaman {
    return super.attach(address) as CheckInShaman;
  }
  override connect(signer: Signer): CheckInShaman__factory {
    return super.connect(signer) as CheckInShaman__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckInShamanInterface {
    return new utils.Interface(_abi) as CheckInShamanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CheckInShaman {
    return new Contract(address, _abi, signerOrProvider) as CheckInShaman;
  }
}
