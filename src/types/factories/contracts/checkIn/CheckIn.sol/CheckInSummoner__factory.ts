/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CheckInSummoner,
  CheckInSummonerInterface,
} from "../../../../contracts/checkIn/CheckIn.sol/CheckInSummoner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_template",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "baal",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "shamanAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sharesOrLoot",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sharesPerSecond",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "checkInInterval",
        type: "uint256",
      },
    ],
    name: "CheckInSummonComplete",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_baal",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_sharesOrLoot",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_sharesPerSecond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_checkInInterval",
        type: "uint256",
      },
    ],
    name: "summon",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "template",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161033338038061033383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6102a0806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063079794131461003b5780636f2ddd931461006a575b600080fd5b61004e6100493660046101ed565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b60005461004e906001600160a01b031681565b600080548190610095906001600160a01b031661014c565b60405163329f1f8960e11b81529091506001600160a01b0382169063653e3f12906100ca908990899089908990600401610244565b600060405180830381600087803b1580156100e457600080fd5b505af11580156100f8573d6000803e3d6000fd5b50505050856001600160a01b03167ff1e7a2348dc82c13be7ae51f6f7365364f8800a1a1b73a1e5bcf0bbf4644f5c18287878760405161013b9493929190610244565b60405180910390a295945050505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166101e85760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b6000806000806080858703121561020357600080fd5b84356001600160a01b038116811461021a57600080fd5b93506020850135801515811461022f57600080fd5b93969395505050506040820135916060013590565b6001600160a01b039490941684529115156020840152604083015260608201526080019056fea26469706673582212207d675dbb80872c81cdeb69dff14e07dace0d777a758153241f9e4c9a2181470264736f6c63430008070033";

type CheckInSummonerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheckInSummonerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CheckInSummoner__factory extends ContractFactory {
  constructor(...args: CheckInSummonerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _template: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CheckInSummoner> {
    return super.deploy(_template, overrides || {}) as Promise<CheckInSummoner>;
  }
  override getDeployTransaction(
    _template: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_template, overrides || {});
  }
  override attach(address: string): CheckInSummoner {
    return super.attach(address) as CheckInSummoner;
  }
  override connect(signer: Signer): CheckInSummoner__factory {
    return super.connect(signer) as CheckInSummoner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckInSummonerInterface {
    return new utils.Interface(_abi) as CheckInSummonerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CheckInSummoner {
    return new Contract(address, _abi, signerOrProvider) as CheckInSummoner;
  }
}
