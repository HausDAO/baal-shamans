/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  VcVerifier,
  VcVerifierInterface,
} from "../../../../../contracts/onboarder/credentials/VCVerifier.sol/VcVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "domainName",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161020f38038061020f83398101604081905261002f9161009f565b60408051602080820183528382528351848201209251919261007c927fb2178a58fb1eefb359ecfdd57bb19c0bdd0f4e6eed8547f46600e500ed111af39201918252602082015260400190565b604051602081830303815290604052805190602001206000819055505050610184565b600060208083850312156100b257600080fd5b82516001600160401b03808211156100c957600080fd5b818501915085601f8301126100dd57600080fd5b8151818111156100ef576100ef61016e565b604051601f8201601f19908116603f011681019083821181831017156101175761011761016e565b81604052828152888684870101111561012f57600080fd5b600093505b828410156101515784840186015181850187015292850192610134565b828411156101625760008684830101525b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b607d806101926000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633644e51514602d575b600080fd5b603560005481565b60405190815260200160405180910390f3fea26469706673582212201ac1c694177f7bbea5b892dfbd332df410e38aa7041ea445f078f1c320a56dd864736f6c63430008070033";

type VcVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VcVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VcVerifier__factory extends ContractFactory {
  constructor(...args: VcVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    domainName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VcVerifier> {
    return super.deploy(domainName, overrides || {}) as Promise<VcVerifier>;
  }
  override getDeployTransaction(
    domainName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(domainName, overrides || {});
  }
  override attach(address: string): VcVerifier {
    return super.attach(address) as VcVerifier;
  }
  override connect(signer: Signer): VcVerifier__factory {
    return super.connect(signer) as VcVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VcVerifierInterface {
    return new utils.Interface(_abi) as VcVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VcVerifier {
    return new Contract(address, _abi, signerOrProvider) as VcVerifier;
  }
}
