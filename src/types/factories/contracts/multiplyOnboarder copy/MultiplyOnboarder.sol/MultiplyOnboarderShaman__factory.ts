/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MultiplyOnboarderShaman,
  MultiplyOnboarderShamanInterface,
} from "../../../../contracts/multiplyOnboarder copy/MultiplyOnboarder.sol/MultiplyOnboarderShaman";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "contributorAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountStaked",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountMinted",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "baal",
        type: "address",
      },
    ],
    name: "ObReceived",
    type: "event",
  },
  {
    inputs: [],
    name: "baal",
    outputs: [
      {
        internalType: "contract IBAAL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "expiery",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_moloch",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_expiery",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_multiplier",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_isShares",
        type: "bool",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isShares",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "onboarder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600081905554610100900460ff161580801561003357506001805460ff16105b8061005d575061004c3061013160201b6106a31760201c565b15801561005d57506001805460ff16145b6100c45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6001805460ff19168117905580156100e6576001805461ff0019166101001790555b801561012b576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50610140565b6001600160a01b03163b151590565b610a268061014f6000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c8063043c2694146100725780631b3ed722146100875780634c5911b6146100a35780639757b8aa146100ac578063e5a2a2a5146100c9578063eddcd33e146100f9578063fc0c546a1461010c575b600080fd5b61008561008036600461084d565b61011f565b005b61009060035481565b6040519081526020015b60405180910390f35b61009060025481565b6004546100b99060ff1681565b604051901515815260200161009a565b6004546100e19061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161009a565b6100856101073660046108c9565b61031c565b6005546100e1906001600160a01b031681565b600154610100900460ff161580801561013c57506001805460ff16105b8061015c575061014b306106a3565b15801561015c57506001805460ff16145b6101c45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6001805460ff19168117905580156101e6576001805461ff0019166101001790555b6001600160a01b0386166102265760405162461bcd60e51b8152602060048201526007602482015266042daded8dec6d60cb1b60448201526064016101bb565b826102615760405162461bcd60e51b815260206004820152600b60248201526a10b6bab63a34b83634b2b960a91b60448201526064016101bb565b4284116102805760405162461bcd60e51b81526004016101bb90610966565b60048054600580546001600160a01b0319166001600160a01b0389811691909117909155600287905560038690556001600160a81b03199091166101009189169190910260ff1916178315151790558015610314576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6002600054141561036f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101bb565b600260005560045461010090046001600160a01b03166103b95760405162461bcd60e51b8152602060048201526005602482015264085a5b9a5d60da1b60448201526064016101bb565b42600254116103da5760405162461bcd60e51b81526004016101bb90610966565b6004805460405163f3ae241560e01b8152309281019290925261010090046001600160a01b03169063f3ae241590602401602060405180830381600087803b15801561042557600080fd5b505af1158015610439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045d91906108ac565b61049e5760405162461bcd60e51b815260206004820152601260248201527129b430b6b0b7103737ba1036b0b730b3b2b960711b60448201526064016101bb565b600081116104d75760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b60448201526064016101bb565b6005546004805460408051636a5c1cc960e11b815290516001600160a01b03948516946323b872dd94339461010090049091169263d4b8399292818301926020928290030181600087803b15801561052e57600080fd5b505af1158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190610829565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401602060405180830381600087803b1580156105b557600080fd5b505af11580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed91906108ac565b61062b5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016101bb565b60006003548261063b9190610987565b905061064733826106b2565b60045460408051848152602081018490526101009092046001600160a01b03169082015233907ffbeaac2a070b455e87f85b5e1a979f980e8095bf99e97ebbbe9e8e526388ed609060600160405180910390a250506001600055565b6001600160a01b03163b151590565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106106e8576106e86109b4565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610739576107396109b4565b602090810291909101015260045460ff16156107bb5760048054604051632c78fd0360e21b81526101009091046001600160a01b03169163b1e3f40c916107849186918691016108e2565b600060405180830381600087803b15801561079e57600080fd5b505af11580156107b2573d6000803e3d6000fd5b50505050610823565b600480546040516322936c2360e11b81526101009091046001600160a01b031691634526d846916107f09186918691016108e2565b600060405180830381600087803b15801561080a57600080fd5b505af115801561081e573d6000803e3d6000fd5b505050505b50505050565b60006020828403121561083b57600080fd5b8151610846816109ca565b9392505050565b600080600080600060a0868803121561086557600080fd5b8535610870816109ca565b94506020860135610880816109ca565b93506040860135925060608601359150608086013561089e816109e2565b809150509295509295909350565b6000602082840312156108be57600080fd5b8151610846816109e2565b6000602082840312156108db57600080fd5b5035919050565b604080825283519082018190526000906020906060840190828701845b828110156109245781516001600160a01b0316845292840192908401906001016108ff565b5050508381038285015284518082528583019183019060005b818110156109595783518352928401929184019160010161093d565b5090979650505050505050565b6020808252600790820152666578706965727960c81b604082015260600190565b60008160001904831182151516156109af57634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146109df57600080fd5b50565b80151581146109df57600080fdfea26469706673582212207ee443c4a08e1d27607aae0475f7a70971812890c3272f80079947e8fcdae3d464736f6c63430008070033";

type MultiplyOnboarderShamanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiplyOnboarderShamanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiplyOnboarderShaman__factory extends ContractFactory {
  constructor(...args: MultiplyOnboarderShamanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiplyOnboarderShaman> {
    return super.deploy(overrides || {}) as Promise<MultiplyOnboarderShaman>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiplyOnboarderShaman {
    return super.attach(address) as MultiplyOnboarderShaman;
  }
  override connect(signer: Signer): MultiplyOnboarderShaman__factory {
    return super.connect(signer) as MultiplyOnboarderShaman__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiplyOnboarderShamanInterface {
    return new utils.Interface(_abi) as MultiplyOnboarderShamanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiplyOnboarderShaman {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultiplyOnboarderShaman;
  }
}
