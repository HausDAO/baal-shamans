/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  NFTClaimerShaman,
  NFTClaimerShamanInterface,
} from "../../../../contracts/nftClaimer/NFTClaimer.sol/NFTClaimerShaman";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isShares",
        type: "bool",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "baal",
    outputs: [
      {
        internalType: "contract IBAAL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "batchClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "claims",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_moloch",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isShares",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_perNft",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isShares",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nft",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "perNft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a14806100206000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c8063379607f51461008857806347ccca021461009d5780639757b8aa146100cd578063a888c2cd146100ea578063ae4b53f214610118578063bc2927821461012b578063d32ee3401461013e578063e5a2a2a514610147578063fc0c546a14610160575b600080fd5b61009b6100963660046108d4565b610173565b005b6002546100b0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6004546100da9060ff1681565b60405190151581526020016100c4565b61010a6100f83660046108d4565b60036020526000908152604090205481565b6040519081526020016100c4565b61009b6101263660046107b9565b61031a565b61009b61013936600461080f565b6105d6565b61010a60055481565b6000546100b0906201000090046001600160a01b031681565b6001546100b0906001600160a01b031681565b6002546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156101b757600080fd5b505afa1580156101cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ef9190610795565b6001600160a01b03161461023a5760405162461bcd60e51b815260206004820152600d60248201526c36bab9ba1031329037bbb732b960991b60448201526064015b60405180910390fd5b600081815260036020526040902054156102965760405162461bcd60e51b815260206004820181905260248201527f746f6b656e49642068617320616c7265616479206265656e20636c61696d65646044820152606401610231565b60006102a160055490565b90506102ad338261061a565b60008281526003602090815260409182902042908190556004548351338152928301869052928201526060810183905260ff909116151560808201527f429cf242314616b89932107da4e90dda634f23c6ace26055d6a2ec0735b2877f9060a00160405180910390a15050565b600054610100900460ff161580801561033a5750600054600160ff909116105b806103545750303b158015610354575060005460ff166001145b6103b75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610231565b6000805460ff1916600117905580156103da576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038881169190910291909117909155600280546001600160a01b0319169186169190911790556004805460ff191684158015919091179091556104dd57600060029054906101000a90046001600160a01b03166001600160a01b0316638009ba1f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b89190610795565b600180546001600160a01b0319166001600160a01b0392909216919091179055610584565b600060029054906101000a90046001600160a01b03166001600160a01b031663f460124d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561052b57600080fd5b505afa15801561053f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105639190610795565b600180546001600160a01b0319166001600160a01b03929092169190911790555b600582905580156105cf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60005b8151811015610616576106048282815181106105f7576105f761099a565b6020026020010151610173565b8061060e81610971565b9150506105d9565b5050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106106505761065061099a565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905082816000815181106106a1576106a161099a565b602090810291909101015260045460ff161561072557600054604051632c78fd0360e21b8152620100009091046001600160a01b03169063b1e3f40c906106ee90859085906004016108ed565b600060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b5050505061078f565b6000546040516322936c2360e11b8152620100009091046001600160a01b031690634526d8469061075c90859085906004016108ed565b600060405180830381600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b505050505b50505050565b6000602082840312156107a757600080fd5b81516107b2816109c6565b9392505050565b600080600080608085870312156107cf57600080fd5b84356107da816109c6565b935060208501356107ea816109c6565b9250604085013580151581146107ff57600080fd5b9396929550929360600135925050565b6000602080838503121561082257600080fd5b823567ffffffffffffffff8082111561083a57600080fd5b818501915085601f83011261084e57600080fd5b813581811115610860576108606109b0565b8060051b604051601f19603f83011681018181108582111715610885576108856109b0565b604052828152858101935084860182860187018a10156108a457600080fd5b600095505b838610156108c75780358552600195909501949386019386016108a9565b5098975050505050505050565b6000602082840312156108e657600080fd5b5035919050565b604080825283519082018190526000906020906060840190828701845b8281101561092f5781516001600160a01b03168452928401929084019060010161090a565b5050508381038285015284518082528583019183019060005b8181101561096457835183529284019291840191600101610948565b5090979650505050505050565b600060001982141561099357634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109db57600080fd5b5056fea26469706673582212206d63a09f60e7ee823f577a82e845ec13887cd2706fa73082be79be54f417a99264736f6c63430008070033";

type NFTClaimerShamanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTClaimerShamanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTClaimerShaman__factory extends ContractFactory {
  constructor(...args: NFTClaimerShamanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTClaimerShaman> {
    return super.deploy(overrides || {}) as Promise<NFTClaimerShaman>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTClaimerShaman {
    return super.attach(address) as NFTClaimerShaman;
  }
  override connect(signer: Signer): NFTClaimerShaman__factory {
    return super.connect(signer) as NFTClaimerShaman__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTClaimerShamanInterface {
    return new utils.Interface(_abi) as NFTClaimerShamanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTClaimerShaman {
    return new Contract(address, _abi, signerOrProvider) as NFTClaimerShaman;
  }
}
