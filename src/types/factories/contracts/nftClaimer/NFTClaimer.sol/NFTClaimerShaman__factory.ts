/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  NFTClaimerShaman,
  NFTClaimerShamanInterface,
} from "../../../../contracts/nftClaimer/NFTClaimer.sol/NFTClaimerShaman";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "baal",
    outputs: [
      {
        internalType: "contract IBAAL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "batchClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "claims",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_moloch",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isShares",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_perNft",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isShares",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nft",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "perNft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109bb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c8063379607f51461008857806347ccca021461009d5780639757b8aa146100cd578063a888c2cd146100ea578063ae4b53f214610118578063bc2927821461012b578063d32ee3401461013e578063e5a2a2a514610147578063fc0c546a14610160575b600080fd5b61009b61009636600461087b565b610173565b005b6002546100b0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6004546100da9060ff1681565b60405190151581526020016100c4565b61010a6100f836600461087b565b60036020526000908152604090205481565b6040519081526020016100c4565b61009b610126366004610760565b6102c1565b61009b6101393660046107b6565b61057d565b61010a60055481565b6000546100b0906201000090046001600160a01b031681565b6001546100b0906001600160a01b031681565b6002546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156101b757600080fd5b505afa1580156101cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ef919061073c565b6001600160a01b03161461023a5760405162461bcd60e51b815260206004820152600d60248201526c36bab9ba1031329037bbb732b960991b60448201526064015b60405180910390fd5b600081815260036020526040902054156102965760405162461bcd60e51b815260206004820181905260248201527f746f6b656e49642068617320616c7265616479206265656e20636c61696d65646044820152606401610231565b60006102a160055490565b90506102ad33826105c1565b506000908152600360205260409020429055565b600054610100900460ff16158080156102e15750600054600160ff909116105b806102fb5750303b1580156102fb575060005460ff166001145b61035e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610231565b6000805460ff191660011790558015610381576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038881169190910291909117909155600280546001600160a01b0319169186169190911790556004805460ff1916841580159190911790915561048457600060029054906101000a90046001600160a01b03166001600160a01b0316638009ba1f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561042757600080fd5b505afa15801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f919061073c565b600180546001600160a01b0319166001600160a01b039290921691909117905561052b565b600060029054906101000a90046001600160a01b03166001600160a01b031663f460124d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d257600080fd5b505afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a919061073c565b600180546001600160a01b0319166001600160a01b03929092169190911790555b60058290558015610576576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60005b81518110156105bd576105ab82828151811061059e5761059e610941565b6020026020010151610173565b806105b581610918565b915050610580565b5050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106105f7576105f7610941565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050828160008151811061064857610648610941565b602090810291909101015260045460ff16156106cc57600054604051632c78fd0360e21b8152620100009091046001600160a01b03169063b1e3f40c906106959085908590600401610894565b600060405180830381600087803b1580156106af57600080fd5b505af11580156106c3573d6000803e3d6000fd5b50505050610736565b6000546040516322936c2360e11b8152620100009091046001600160a01b031690634526d846906107039085908590600401610894565b600060405180830381600087803b15801561071d57600080fd5b505af1158015610731573d6000803e3d6000fd5b505050505b50505050565b60006020828403121561074e57600080fd5b81516107598161096d565b9392505050565b6000806000806080858703121561077657600080fd5b84356107818161096d565b935060208501356107918161096d565b9250604085013580151581146107a657600080fd5b9396929550929360600135925050565b600060208083850312156107c957600080fd5b823567ffffffffffffffff808211156107e157600080fd5b818501915085601f8301126107f557600080fd5b81358181111561080757610807610957565b8060051b604051601f19603f8301168101818110858211171561082c5761082c610957565b604052828152858101935084860182860187018a101561084b57600080fd5b600095505b8386101561086e578035855260019590950194938601938601610850565b5098975050505050505050565b60006020828403121561088d57600080fd5b5035919050565b604080825283519082018190526000906020906060840190828701845b828110156108d65781516001600160a01b0316845292840192908401906001016108b1565b5050508381038285015284518082528583019183019060005b8181101561090b578351835292840192918401916001016108ef565b5090979650505050505050565b600060001982141561093a57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461098257600080fd5b5056fea264697066735822122008a68ddc4f5864dc7153a19d73a71ead0ee0f77646554992f1fb881183cb31ab64736f6c63430008070033";

type NFTClaimerShamanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTClaimerShamanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTClaimerShaman__factory extends ContractFactory {
  constructor(...args: NFTClaimerShamanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTClaimerShaman> {
    return super.deploy(overrides || {}) as Promise<NFTClaimerShaman>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTClaimerShaman {
    return super.attach(address) as NFTClaimerShaman;
  }
  override connect(signer: Signer): NFTClaimerShaman__factory {
    return super.connect(signer) as NFTClaimerShaman__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTClaimerShamanInterface {
    return new utils.Interface(_abi) as NFTClaimerShamanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTClaimerShaman {
    return new Contract(address, _abi, signerOrProvider) as NFTClaimerShaman;
  }
}
