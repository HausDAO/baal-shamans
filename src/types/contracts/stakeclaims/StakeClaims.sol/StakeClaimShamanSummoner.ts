/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface StakeClaimShamanSummonerInterface extends utils.Interface {
  functions: {
    "summonStakeClaim(address,address,address,bool,uint256,uint256,string)": FunctionFragment;
    "template()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "summonStakeClaim" | "template"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "summonStakeClaim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "template", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "summonStakeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "template", data: BytesLike): Result;

  events: {
    "SummonStakeClaim(address,address,address,address,bool,uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SummonStakeClaim"): EventFragment;
}

export interface SummonStakeClaimEventObject {
  baal: string;
  stakeClaim: string;
  token: string;
  owner: string;
  isShares: boolean;
  expiery: BigNumber;
  multiplier: BigNumber;
  details: string;
}
export type SummonStakeClaimEvent = TypedEvent<
  [string, string, string, string, boolean, BigNumber, BigNumber, string],
  SummonStakeClaimEventObject
>;

export type SummonStakeClaimEventFilter =
  TypedEventFilter<SummonStakeClaimEvent>;

export interface StakeClaimShamanSummoner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeClaimShamanSummonerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    summonStakeClaim(
      _moloch: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _isShares: PromiseOrValue<boolean>,
      _expiery: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    template(overrides?: CallOverrides): Promise<[string]>;
  };

  summonStakeClaim(
    _moloch: PromiseOrValue<string>,
    _stakeToken: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _isShares: PromiseOrValue<boolean>,
    _expiery: PromiseOrValue<BigNumberish>,
    _multiplier: PromiseOrValue<BigNumberish>,
    _details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  template(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    summonStakeClaim(
      _moloch: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _isShares: PromiseOrValue<boolean>,
      _expiery: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    template(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SummonStakeClaim(address,address,address,address,bool,uint256,uint256,string)"(
      baal?: PromiseOrValue<string> | null,
      stakeClaim?: null,
      token?: null,
      owner?: null,
      isShares?: null,
      expiery?: null,
      multiplier?: null,
      details?: null
    ): SummonStakeClaimEventFilter;
    SummonStakeClaim(
      baal?: PromiseOrValue<string> | null,
      stakeClaim?: null,
      token?: null,
      owner?: null,
      isShares?: null,
      expiery?: null,
      multiplier?: null,
      details?: null
    ): SummonStakeClaimEventFilter;
  };

  estimateGas: {
    summonStakeClaim(
      _moloch: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _isShares: PromiseOrValue<boolean>,
      _expiery: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    template(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    summonStakeClaim(
      _moloch: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _isShares: PromiseOrValue<boolean>,
      _expiery: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    template(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
