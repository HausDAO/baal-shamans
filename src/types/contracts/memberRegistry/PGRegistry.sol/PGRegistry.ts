/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace MemberRegistry {
  export type MemberStruct = {
    account: PromiseOrValue<string>;
    secondsActive: PromiseOrValue<BigNumberish>;
    activityMultiplier: PromiseOrValue<BigNumberish>;
    startDate: PromiseOrValue<BigNumberish>;
    periodSecondsActive: PromiseOrValue<BigNumberish>;
  };

  export type MemberStructOutput = [string, number, number, number, number] & {
    account: string;
    secondsActive: number;
    activityMultiplier: number;
    startDate: number;
    periodSecondsActive: number;
  };
}

export interface PGRegistryInterface extends utils.Interface {
  functions: {
    "PERCENTAGE_SCALE()": FunctionFragment;
    "batchNewMember(address[],uint32[],uint32[])": FunctionFragment;
    "batchUpdateMember(address[],uint32[])": FunctionFragment;
    "count()": FunctionFragment;
    "lastTrigger()": FunctionFragment;
    "lastUpdate()": FunctionFragment;
    "memberIdxs(address)": FunctionFragment;
    "members(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setNewMember(address,uint32,uint32)": FunctionFragment;
    "splits()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "triggerCalcAndSplits()": FunctionFragment;
    "updateMember(address,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PERCENTAGE_SCALE"
      | "batchNewMember"
      | "batchUpdateMember"
      | "count"
      | "lastTrigger"
      | "lastUpdate"
      | "memberIdxs"
      | "members"
      | "owner"
      | "renounceOwnership"
      | "setNewMember"
      | "splits"
      | "transferOwnership"
      | "triggerCalcAndSplits"
      | "updateMember"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PERCENTAGE_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchNewMember",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateMember",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastTrigger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memberIdxs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNewMember",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "splits", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerCalcAndSplits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMember",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "PERCENTAGE_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchNewMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "memberIdxs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerCalcAndSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMember",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetMember(tuple)": EventFragment;
    "Trigger(uint32)": EventFragment;
    "Update(uint32)": EventFragment;
    "UpdateMember(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trigger"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMember"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetMemberEventObject {
  member: MemberRegistry.MemberStructOutput;
}
export type SetMemberEvent = TypedEvent<
  [MemberRegistry.MemberStructOutput],
  SetMemberEventObject
>;

export type SetMemberEventFilter = TypedEventFilter<SetMemberEvent>;

export interface TriggerEventObject {
  arg0: number;
}
export type TriggerEvent = TypedEvent<[number], TriggerEventObject>;

export type TriggerEventFilter = TypedEventFilter<TriggerEvent>;

export interface UpdateEventObject {
  arg0: number;
}
export type UpdateEvent = TypedEvent<[number], UpdateEventObject>;

export type UpdateEventFilter = TypedEventFilter<UpdateEvent>;

export interface UpdateMemberEventObject {
  member: MemberRegistry.MemberStructOutput;
}
export type UpdateMemberEvent = TypedEvent<
  [MemberRegistry.MemberStructOutput],
  UpdateMemberEventObject
>;

export type UpdateMemberEventFilter = TypedEventFilter<UpdateMemberEvent>;

export interface PGRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PGRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<[number]>;

    batchNewMember(
      _members: PromiseOrValue<string>[],
      _activityMultipliers: PromiseOrValue<BigNumberish>[],
      _startDates: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchUpdateMember(
      _members: PromiseOrValue<string>[],
      _activityMultipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTrigger(overrides?: CallOverrides): Promise<[number]>;

    lastUpdate(overrides?: CallOverrides): Promise<[number]>;

    memberIdxs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number, number] & {
        account: string;
        secondsActive: number;
        activityMultiplier: number;
        startDate: number;
        periodSecondsActive: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splits(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerCalcAndSplits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<number>;

  batchNewMember(
    _members: PromiseOrValue<string>[],
    _activityMultipliers: PromiseOrValue<BigNumberish>[],
    _startDates: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchUpdateMember(
    _members: PromiseOrValue<string>[],
    _activityMultipliers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  lastTrigger(overrides?: CallOverrides): Promise<number>;

  lastUpdate(overrides?: CallOverrides): Promise<number>;

  memberIdxs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  members(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, number, number] & {
      account: string;
      secondsActive: number;
      activityMultiplier: number;
      startDate: number;
      periodSecondsActive: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewMember(
    _member: PromiseOrValue<string>,
    _activityMultiplier: PromiseOrValue<BigNumberish>,
    _startDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splits(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerCalcAndSplits(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMember(
    _member: PromiseOrValue<string>,
    _activityMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<number>;

    batchNewMember(
      _members: PromiseOrValue<string>[],
      _activityMultipliers: PromiseOrValue<BigNumberish>[],
      _startDates: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchUpdateMember(
      _members: PromiseOrValue<string>[],
      _activityMultipliers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    lastTrigger(overrides?: CallOverrides): Promise<number>;

    lastUpdate(overrides?: CallOverrides): Promise<number>;

    memberIdxs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number, number] & {
        account: string;
        secondsActive: number;
        activityMultiplier: number;
        startDate: number;
        periodSecondsActive: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setNewMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    splits(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerCalcAndSplits(overrides?: CallOverrides): Promise<void>;

    updateMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetMember(tuple)"(member?: null): SetMemberEventFilter;
    SetMember(member?: null): SetMemberEventFilter;

    "Trigger(uint32)"(arg0?: null): TriggerEventFilter;
    Trigger(arg0?: null): TriggerEventFilter;

    "Update(uint32)"(arg0?: null): UpdateEventFilter;
    Update(arg0?: null): UpdateEventFilter;

    "UpdateMember(tuple)"(member?: null): UpdateMemberEventFilter;
    UpdateMember(member?: null): UpdateMemberEventFilter;
  };

  estimateGas: {
    PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    batchNewMember(
      _members: PromiseOrValue<string>[],
      _activityMultipliers: PromiseOrValue<BigNumberish>[],
      _startDates: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchUpdateMember(
      _members: PromiseOrValue<string>[],
      _activityMultipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    lastTrigger(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    memberIdxs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splits(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerCalcAndSplits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERCENTAGE_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchNewMember(
      _members: PromiseOrValue<string>[],
      _activityMultipliers: PromiseOrValue<BigNumberish>[],
      _startDates: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchUpdateMember(
      _members: PromiseOrValue<string>[],
      _activityMultipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTrigger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    memberIdxs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerCalcAndSplits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
