/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ISPLITSInterface extends utils.Interface {
  functions: {
    "acceptControl(address)": FunctionFragment;
    "cancelControlTransfer(address)": FunctionFragment;
    "createSplit(address[],uint32[],uint32,address)": FunctionFragment;
    "distributeERC20(address,address,address[],uint32[],uint32,address)": FunctionFragment;
    "distributeETH(address,address[],uint32[],uint32,address)": FunctionFragment;
    "transferControl(address,address)": FunctionFragment;
    "updateSplit(address,address[],uint32[],uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptControl"
      | "cancelControlTransfer"
      | "createSplit"
      | "distributeERC20"
      | "distributeETH"
      | "transferControl"
      | "updateSplit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptControl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelControlTransfer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createSplit",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferControl",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSplit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelControlTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSplit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISPLITS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISPLITSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptControl(
      split: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelControlTransfer(
      split: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSplit(
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorsFee: PromiseOrValue<BigNumberish>,
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeERC20(
      split: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorFee: PromiseOrValue<BigNumberish>,
      distributorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeETH(
      split: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorFee: PromiseOrValue<BigNumberish>,
      distributorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferControl(
      split: PromiseOrValue<string>,
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSplit(
      split: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorsFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptControl(
    split: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelControlTransfer(
    split: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSplit(
    accounts: PromiseOrValue<string>[],
    percentAllocations: PromiseOrValue<BigNumberish>[],
    distributorsFee: PromiseOrValue<BigNumberish>,
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeERC20(
    split: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    accounts: PromiseOrValue<string>[],
    percentAllocations: PromiseOrValue<BigNumberish>[],
    distributorFee: PromiseOrValue<BigNumberish>,
    distributorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeETH(
    split: PromiseOrValue<string>,
    accounts: PromiseOrValue<string>[],
    percentAllocations: PromiseOrValue<BigNumberish>[],
    distributorFee: PromiseOrValue<BigNumberish>,
    distributorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferControl(
    split: PromiseOrValue<string>,
    newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSplit(
    split: PromiseOrValue<string>,
    accounts: PromiseOrValue<string>[],
    percentAllocations: PromiseOrValue<BigNumberish>[],
    distributorsFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptControl(
      split: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelControlTransfer(
      split: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createSplit(
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorsFee: PromiseOrValue<BigNumberish>,
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeERC20(
      split: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorFee: PromiseOrValue<BigNumberish>,
      distributorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeETH(
      split: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorFee: PromiseOrValue<BigNumberish>,
      distributorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferControl(
      split: PromiseOrValue<string>,
      newController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSplit(
      split: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorsFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptControl(
      split: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelControlTransfer(
      split: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSplit(
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorsFee: PromiseOrValue<BigNumberish>,
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeERC20(
      split: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorFee: PromiseOrValue<BigNumberish>,
      distributorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeETH(
      split: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorFee: PromiseOrValue<BigNumberish>,
      distributorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferControl(
      split: PromiseOrValue<string>,
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSplit(
      split: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorsFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptControl(
      split: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelControlTransfer(
      split: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSplit(
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorsFee: PromiseOrValue<BigNumberish>,
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeERC20(
      split: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorFee: PromiseOrValue<BigNumberish>,
      distributorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeETH(
      split: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorFee: PromiseOrValue<BigNumberish>,
      distributorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferControl(
      split: PromiseOrValue<string>,
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSplit(
      split: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      percentAllocations: PromiseOrValue<BigNumberish>[],
      distributorsFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
