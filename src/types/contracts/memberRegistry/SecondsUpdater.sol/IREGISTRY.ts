/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IREGISTRY {
  export type MemberStruct = {
    account: PromiseOrValue<string>;
    activity: PromiseOrValue<BigNumberish>;
    activityMultiplier: PromiseOrValue<BigNumberish>;
    startDate: PromiseOrValue<BigNumberish>;
  };

  export type MemberStructOutput = [string, number, number, number] & {
    account: string;
    activity: number;
    activityMultiplier: number;
    startDate: number;
  };
}

export interface IREGISTRYInterface extends utils.Interface {
  functions: {
    "_addToActivity(address,uint32)": FunctionFragment;
    "_setNewMember(address,uint32,uint32)": FunctionFragment;
    "_updateMember(address,uint32,uint32)": FunctionFragment;
    "getMembers()": FunctionFragment;
    "lastUpdate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_addToActivity"
      | "_setNewMember"
      | "_updateMember"
      | "getMembers"
      | "lastUpdate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_addToActivity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setNewMember",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_updateMember",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_addToActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setNewMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updateMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;

  events: {};
}

export interface IREGISTRY extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IREGISTRYInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addToActivity(
      _member: PromiseOrValue<string>,
      _activity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setNewMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _updateMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMembers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _addToActivity(
    _member: PromiseOrValue<string>,
    _activity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setNewMember(
    _member: PromiseOrValue<string>,
    _activityMultiplier: PromiseOrValue<BigNumberish>,
    _startDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _updateMember(
    _member: PromiseOrValue<string>,
    _activityMultiplier: PromiseOrValue<BigNumberish>,
    _startDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMembers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _addToActivity(
      _member: PromiseOrValue<string>,
      _activity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setNewMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _updateMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMembers(
      overrides?: CallOverrides
    ): Promise<IREGISTRY.MemberStructOutput[]>;

    lastUpdate(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    _addToActivity(
      _member: PromiseOrValue<string>,
      _activity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setNewMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _updateMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMembers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addToActivity(
      _member: PromiseOrValue<string>,
      _activity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setNewMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _updateMember(
      _member: PromiseOrValue<string>,
      _activityMultiplier: PromiseOrValue<BigNumberish>,
      _startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMembers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
