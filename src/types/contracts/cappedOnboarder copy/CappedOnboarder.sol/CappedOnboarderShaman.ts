/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface CappedOnboarderShamanInterface extends utils.Interface {
  functions: {
    "PERC_POINTS()": FunctionFragment;
    "amounts(uint256)": FunctionFragment;
    "baal()": FunctionFragment;
    "cap()": FunctionFragment;
    "claimedShares(address)": FunctionFragment;
    "cuts(uint256)": FunctionFragment;
    "expiery()": FunctionFragment;
    "init(address,address,uint256,uint256,uint256,address[],uint256[])": FunctionFragment;
    "multiplier()": FunctionFragment;
    "onboarder(uint256,uint256)": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PERC_POINTS"
      | "amounts"
      | "baal"
      | "cap"
      | "claimedShares"
      | "cuts"
      | "expiery"
      | "init"
      | "multiplier"
      | "onboarder"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PERC_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "baal", values?: undefined): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedShares",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cuts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "expiery", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onboarder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "PERC_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "amounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cuts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiery", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiplier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onboarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "ObReceived(address,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ObReceived"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ObReceivedEventObject {
  contributorAddress: string;
  amount: BigNumber;
  baal: string;
  lootToCuts: BigNumber;
  tribute: BigNumber;
}
export type ObReceivedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  ObReceivedEventObject
>;

export type ObReceivedEventFilter = TypedEventFilter<ObReceivedEvent>;

export interface CappedOnboarderShaman extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CappedOnboarderShamanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERC_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    amounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baal(overrides?: CallOverrides): Promise<[string]>;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimedShares(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cuts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    expiery(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _expiery: PromiseOrValue<BigNumberish>,
      _cap: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _cuts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    onboarder(
      _value: PromiseOrValue<BigNumberish>,
      _tribute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  PERC_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  amounts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baal(overrides?: CallOverrides): Promise<string>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  claimedShares(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cuts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  expiery(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    _moloch: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _expiery: PromiseOrValue<BigNumberish>,
    _cap: PromiseOrValue<BigNumberish>,
    _multiplier: PromiseOrValue<BigNumberish>,
    _cuts: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  onboarder(
    _value: PromiseOrValue<BigNumberish>,
    _tribute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PERC_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    amounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baal(overrides?: CallOverrides): Promise<string>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    claimedShares(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cuts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    expiery(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _expiery: PromiseOrValue<BigNumberish>,
      _cap: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _cuts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    onboarder(
      _value: PromiseOrValue<BigNumberish>,
      _tribute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ObReceived(address,uint256,address,uint256,uint256)"(
      contributorAddress?: PromiseOrValue<string> | null,
      amount?: null,
      baal?: null,
      lootToCuts?: null,
      tribute?: null
    ): ObReceivedEventFilter;
    ObReceived(
      contributorAddress?: PromiseOrValue<string> | null,
      amount?: null,
      baal?: null,
      lootToCuts?: null,
      tribute?: null
    ): ObReceivedEventFilter;
  };

  estimateGas: {
    PERC_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    amounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baal(overrides?: CallOverrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    claimedShares(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cuts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiery(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _expiery: PromiseOrValue<BigNumberish>,
      _cap: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _cuts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    onboarder(
      _value: PromiseOrValue<BigNumberish>,
      _tribute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PERC_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedShares(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cuts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _expiery: PromiseOrValue<BigNumberish>,
      _cap: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _cuts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onboarder(
      _value: PromiseOrValue<BigNumberish>,
      _tribute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
