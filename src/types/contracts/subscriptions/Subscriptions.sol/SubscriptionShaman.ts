/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface SubscriptionShamanInterface extends utils.Interface {
  functions: {
    "amounts(uint256)": FunctionFragment;
    "baal()": FunctionFragment;
    "cancel()": FunctionFragment;
    "count()": FunctionFragment;
    "cuts(uint256)": FunctionFragment;
    "init(address,address,uint256,uint256,uint256,uint256,bool,address[],uint256[])": FunctionFragment;
    "lootPerPeriod()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "priceActivation()": FunctionFragment;
    "pricePerPeriod()": FunctionFragment;
    "shares()": FunctionFragment;
    "subscribe()": FunctionFragment;
    "subscriberIdxs(address)": FunctionFragment;
    "subscribers(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "triggerPayment(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amounts"
      | "baal"
      | "cancel"
      | "count"
      | "cuts"
      | "init"
      | "lootPerPeriod"
      | "periodLength"
      | "priceActivation"
      | "pricePerPeriod"
      | "shares"
      | "subscribe"
      | "subscriberIdxs"
      | "subscribers"
      | "token"
      | "triggerPayment"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "baal", values?: undefined): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cuts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lootPerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceActivation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shares", values?: undefined): string;
  encodeFunctionData(functionFragment: "subscribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscriberIdxs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "triggerPayment",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "amounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cuts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lootPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriberIdxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "triggerPayment",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Subscription(address,uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscription"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface SubscriptionEventObject {
  contributorAddress: string;
  amount: BigNumber;
  baal: string;
  lootToGive: BigNumber;
  lootToPlatform: BigNumber;
  starDate: BigNumber;
}
export type SubscriptionEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  SubscriptionEventObject
>;

export type SubscriptionEventFilter = TypedEventFilter<SubscriptionEvent>;

export interface SubscriptionShaman extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionShamanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baal(overrides?: CallOverrides): Promise<[string]>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    cuts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    init(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceActivation: PromiseOrValue<BigNumberish>,
      _pricePer: PromiseOrValue<BigNumberish>,
      _lootPerUnit: PromiseOrValue<BigNumberish>,
      _periodLength: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<boolean>,
      _cuts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lootPerPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceActivation(overrides?: CallOverrides): Promise<[BigNumber]>;

    pricePerPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    shares(overrides?: CallOverrides): Promise<[boolean]>;

    subscribe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriberIdxs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    subscribers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        starDate: BigNumber;
        lastPaymentDate: BigNumber;
        streak: BigNumber;
        isActive: boolean;
      }
    >;

    token(overrides?: CallOverrides): Promise<[string]>;

    triggerPayment(
      subscriber: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  amounts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baal(overrides?: CallOverrides): Promise<string>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  cuts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    _moloch: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _priceActivation: PromiseOrValue<BigNumberish>,
    _pricePer: PromiseOrValue<BigNumberish>,
    _lootPerUnit: PromiseOrValue<BigNumberish>,
    _periodLength: PromiseOrValue<BigNumberish>,
    _shares: PromiseOrValue<boolean>,
    _cuts: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lootPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  priceActivation(overrides?: CallOverrides): Promise<BigNumber>;

  pricePerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  shares(overrides?: CallOverrides): Promise<boolean>;

  subscribe(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriberIdxs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  subscribers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      id: BigNumber;
      starDate: BigNumber;
      lastPaymentDate: BigNumber;
      streak: BigNumber;
      isActive: boolean;
    }
  >;

  token(overrides?: CallOverrides): Promise<string>;

  triggerPayment(
    subscriber: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    amounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baal(overrides?: CallOverrides): Promise<string>;

    cancel(overrides?: CallOverrides): Promise<void>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    cuts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    init(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceActivation: PromiseOrValue<BigNumberish>,
      _pricePer: PromiseOrValue<BigNumberish>,
      _lootPerUnit: PromiseOrValue<BigNumberish>,
      _periodLength: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<boolean>,
      _cuts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    lootPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    priceActivation(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    shares(overrides?: CallOverrides): Promise<boolean>;

    subscribe(overrides?: CallOverrides): Promise<void>;

    subscriberIdxs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        starDate: BigNumber;
        lastPaymentDate: BigNumber;
        streak: BigNumber;
        isActive: boolean;
      }
    >;

    token(overrides?: CallOverrides): Promise<string>;

    triggerPayment(
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Subscription(address,uint256,address,uint256,uint256,uint256)"(
      contributorAddress?: PromiseOrValue<string> | null,
      amount?: null,
      baal?: null,
      lootToGive?: null,
      lootToPlatform?: null,
      starDate?: null
    ): SubscriptionEventFilter;
    Subscription(
      contributorAddress?: PromiseOrValue<string> | null,
      amount?: null,
      baal?: null,
      lootToGive?: null,
      lootToPlatform?: null,
      starDate?: null
    ): SubscriptionEventFilter;
  };

  estimateGas: {
    amounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baal(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    cuts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceActivation: PromiseOrValue<BigNumberish>,
      _pricePer: PromiseOrValue<BigNumberish>,
      _lootPerUnit: PromiseOrValue<BigNumberish>,
      _periodLength: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<boolean>,
      _cuts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lootPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    priceActivation(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    shares(overrides?: CallOverrides): Promise<BigNumber>;

    subscribe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriberIdxs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    triggerPayment(
      subscriber: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cuts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceActivation: PromiseOrValue<BigNumberish>,
      _pricePer: PromiseOrValue<BigNumberish>,
      _lootPerUnit: PromiseOrValue<BigNumberish>,
      _periodLength: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<boolean>,
      _cuts: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lootPerPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceActivation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subscribe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriberIdxs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscribers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    triggerPayment(
      subscriber: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
