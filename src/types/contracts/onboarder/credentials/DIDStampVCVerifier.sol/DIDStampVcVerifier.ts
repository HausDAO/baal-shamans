/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type ProofStruct = {
  _context: PromiseOrValue<string>;
  created: PromiseOrValue<string>;
  proofPurpose: PromiseOrValue<string>;
  _type: PromiseOrValue<string>;
  verificationMethod: PromiseOrValue<string>;
};

export type ProofStructOutput = [string, string, string, string, string] & {
  _context: string;
  created: string;
  proofPurpose: string;
  _type: string;
  verificationMethod: string;
};

export type CredentialSubjectStruct = {
  _hash: PromiseOrValue<string>;
  id: PromiseOrValue<string>;
  provider: PromiseOrValue<string>;
};

export type CredentialSubjectStructOutput = [string, string, string] & {
  _hash: string;
  id: string;
  provider: string;
};

export type DocumentStruct = {
  _context: PromiseOrValue<string>;
  credentialSubject: CredentialSubjectStruct;
  expirationDate: PromiseOrValue<string>;
  issuanceDate: PromiseOrValue<string>;
  issuer: PromiseOrValue<string>;
  proof: ProofStruct;
  _type: PromiseOrValue<string>[];
};

export type DocumentStructOutput = [
  string,
  CredentialSubjectStructOutput,
  string,
  string,
  string,
  ProofStructOutput,
  string[]
] & {
  _context: string;
  credentialSubject: CredentialSubjectStructOutput;
  expirationDate: string;
  issuanceDate: string;
  issuer: string;
  proof: ProofStructOutput;
  _type: string[];
};

export interface DIDStampVcVerifierInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "hashCredentialProof((string,string,string,string,string))": FunctionFragment;
    "hashCredentialSubject((string,string,string))": FunctionFragment;
    "hashDocument((string,(string,string,string),string,string,string,(string,string,string,string,string),string[]))": FunctionFragment;
    "issuer()": FunctionFragment;
    "pseudoResolve(string)": FunctionFragment;
    "pseudoResolveDidIssuer(string)": FunctionFragment;
    "substring(string,uint256,uint256)": FunctionFragment;
    "verifyStampVc((string,(string,string,string),string,string,string,(string,string,string,string,string),string[]),uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "hashCredentialProof"
      | "hashCredentialSubject"
      | "hashDocument"
      | "issuer"
      | "pseudoResolve"
      | "pseudoResolveDidIssuer"
      | "substring"
      | "verifyStampVc"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashCredentialProof",
    values: [ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashCredentialSubject",
    values: [CredentialSubjectStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashDocument",
    values: [DocumentStruct]
  ): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pseudoResolve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pseudoResolveDidIssuer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "substring",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyStampVc",
    values: [
      DocumentStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashCredentialProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashCredentialSubject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pseudoResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pseudoResolveDidIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "substring", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyStampVc",
    data: BytesLike
  ): Result;

  events: {
    "Verified(string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Verified"): EventFragment;
}

export interface VerifiedEventObject {
  id: string;
  iamHash: string;
  provider: string;
}
export type VerifiedEvent = TypedEvent<
  [string, string, string],
  VerifiedEventObject
>;

export type VerifiedEventFilter = TypedEventFilter<VerifiedEvent>;

export interface DIDStampVcVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DIDStampVcVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    hashCredentialProof(
      proof: ProofStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashCredentialSubject(
      subject: CredentialSubjectStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashDocument(
      document: DocumentStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    issuer(overrides?: CallOverrides): Promise<[string]>;

    pseudoResolve(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pseudoResolveDidIssuer(
      issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    substring(
      str: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyStampVc(
      document: DocumentStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  hashCredentialProof(
    proof: ProofStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  hashCredentialSubject(
    subject: CredentialSubjectStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  hashDocument(
    document: DocumentStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  issuer(overrides?: CallOverrides): Promise<string>;

  pseudoResolve(
    verifier: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  pseudoResolveDidIssuer(
    issuer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  substring(
    str: PromiseOrValue<string>,
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyStampVc(
    document: DocumentStruct,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    hashCredentialProof(
      proof: ProofStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    hashCredentialSubject(
      subject: CredentialSubjectStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    hashDocument(
      document: DocumentStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    issuer(overrides?: CallOverrides): Promise<string>;

    pseudoResolve(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    pseudoResolveDidIssuer(
      issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    substring(
      str: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyStampVc(
      document: DocumentStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Verified(string,string,string)"(
      id?: PromiseOrValue<string> | null,
      iamHash?: null,
      provider?: null
    ): VerifiedEventFilter;
    Verified(
      id?: PromiseOrValue<string> | null,
      iamHash?: null,
      provider?: null
    ): VerifiedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    hashCredentialProof(
      proof: ProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashCredentialSubject(
      subject: CredentialSubjectStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashDocument(
      document: DocumentStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuer(overrides?: CallOverrides): Promise<BigNumber>;

    pseudoResolve(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pseudoResolveDidIssuer(
      issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    substring(
      str: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyStampVc(
      document: DocumentStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashCredentialProof(
      proof: ProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashCredentialSubject(
      subject: CredentialSubjectStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashDocument(
      document: DocumentStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pseudoResolve(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pseudoResolveDidIssuer(
      issuer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    substring(
      str: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyStampVc(
      document: DocumentStruct,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
