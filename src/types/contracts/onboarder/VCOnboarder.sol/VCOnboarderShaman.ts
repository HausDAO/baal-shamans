/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type CredentialSubjectStruct = {
  _hash: PromiseOrValue<string>;
  id: PromiseOrValue<string>;
  provider: PromiseOrValue<string>;
};

export type CredentialSubjectStructOutput = [string, string, string] & {
  _hash: string;
  id: string;
  provider: string;
};

export type ProofStruct = {
  _context: PromiseOrValue<string>;
  created: PromiseOrValue<string>;
  proofPurpose: PromiseOrValue<string>;
  _type: PromiseOrValue<string>;
  verificationMethod: PromiseOrValue<string>;
};

export type ProofStructOutput = [string, string, string, string, string] & {
  _context: string;
  created: string;
  proofPurpose: string;
  _type: string;
  verificationMethod: string;
};

export type DocumentStruct = {
  _context: PromiseOrValue<string>;
  credentialSubject: CredentialSubjectStruct;
  expirationDate: PromiseOrValue<string>;
  issuanceDate: PromiseOrValue<string>;
  issuer: PromiseOrValue<string>;
  proof: ProofStruct;
  _type: PromiseOrValue<string>[];
};

export type DocumentStructOutput = [
  string,
  CredentialSubjectStructOutput,
  string,
  string,
  string,
  ProofStructOutput,
  string[]
] & {
  _context: string;
  credentialSubject: CredentialSubjectStructOutput;
  expirationDate: string;
  issuanceDate: string;
  issuer: string;
  proof: ProofStructOutput;
  _type: string[];
};

export interface VCOnboarderShamanInterface extends utils.Interface {
  functions: {
    "amountPerCredential()": FunctionFragment;
    "baal()": FunctionFragment;
    "init(address,address,bool,uint256,address,uint256)": FunctionFragment;
    "minTribute()": FunctionFragment;
    "onboarder((string,(string,string,string),string,string,string,(string,string,string,string,string),string[]),uint8,bytes32,bytes32)": FunctionFragment;
    "onboarder20((string,(string,string,string),string,string,string,(string,string,string,string,string),string[]),uint8,bytes32,bytes32,uint256)": FunctionFragment;
    "shares()": FunctionFragment;
    "tributeToken()": FunctionFragment;
    "vcVerifier()": FunctionFragment;
    "verifiedStamps(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amountPerCredential"
      | "baal"
      | "init"
      | "minTribute"
      | "onboarder"
      | "onboarder20"
      | "shares"
      | "tributeToken"
      | "vcVerifier"
      | "verifiedStamps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amountPerCredential",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minTribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onboarder",
    values: [
      DocumentStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onboarder20",
    values: [
      DocumentStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "shares", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tributeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vcVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedStamps",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "amountPerCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minTribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onboarder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onboarder20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tributeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vcVerifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifiedStamps",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Onboarded(address,address,address,uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Onboarded"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OnboardedEventObject {
  baal: string;
  sender: string;
  tributeToken: string;
  value: BigNumber;
  shares: boolean;
  amountGiven: BigNumber;
}
export type OnboardedEvent = TypedEvent<
  [string, string, string, BigNumber, boolean, BigNumber],
  OnboardedEventObject
>;

export type OnboardedEventFilter = TypedEventFilter<OnboardedEvent>;

export interface VCOnboarderShaman extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VCOnboarderShamanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountPerCredential(overrides?: CallOverrides): Promise<[BigNumber]>;

    baal(overrides?: CallOverrides): Promise<[string]>;

    init(
      _moloch: PromiseOrValue<string>,
      _vcVerifier: PromiseOrValue<string>,
      _shares: PromiseOrValue<boolean>,
      _amountPerCredential: PromiseOrValue<BigNumberish>,
      _tributeToken: PromiseOrValue<string>,
      _minTribute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minTribute(overrides?: CallOverrides): Promise<[BigNumber]>;

    onboarder(
      _credential: DocumentStruct,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onboarder20(
      _credential: DocumentStruct,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shares(overrides?: CallOverrides): Promise<[boolean]>;

    tributeToken(overrides?: CallOverrides): Promise<[string]>;

    vcVerifier(overrides?: CallOverrides): Promise<[string]>;

    verifiedStamps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  amountPerCredential(overrides?: CallOverrides): Promise<BigNumber>;

  baal(overrides?: CallOverrides): Promise<string>;

  init(
    _moloch: PromiseOrValue<string>,
    _vcVerifier: PromiseOrValue<string>,
    _shares: PromiseOrValue<boolean>,
    _amountPerCredential: PromiseOrValue<BigNumberish>,
    _tributeToken: PromiseOrValue<string>,
    _minTribute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minTribute(overrides?: CallOverrides): Promise<BigNumber>;

  onboarder(
    _credential: DocumentStruct,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onboarder20(
    _credential: DocumentStruct,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shares(overrides?: CallOverrides): Promise<boolean>;

  tributeToken(overrides?: CallOverrides): Promise<string>;

  vcVerifier(overrides?: CallOverrides): Promise<string>;

  verifiedStamps(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    amountPerCredential(overrides?: CallOverrides): Promise<BigNumber>;

    baal(overrides?: CallOverrides): Promise<string>;

    init(
      _moloch: PromiseOrValue<string>,
      _vcVerifier: PromiseOrValue<string>,
      _shares: PromiseOrValue<boolean>,
      _amountPerCredential: PromiseOrValue<BigNumberish>,
      _tributeToken: PromiseOrValue<string>,
      _minTribute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    minTribute(overrides?: CallOverrides): Promise<BigNumber>;

    onboarder(
      _credential: DocumentStruct,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    onboarder20(
      _credential: DocumentStruct,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shares(overrides?: CallOverrides): Promise<boolean>;

    tributeToken(overrides?: CallOverrides): Promise<string>;

    vcVerifier(overrides?: CallOverrides): Promise<string>;

    verifiedStamps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Onboarded(address,address,address,uint256,bool,uint256)"(
      baal?: PromiseOrValue<string> | null,
      sender?: null,
      tributeToken?: null,
      value?: null,
      shares?: null,
      amountGiven?: null
    ): OnboardedEventFilter;
    Onboarded(
      baal?: PromiseOrValue<string> | null,
      sender?: null,
      tributeToken?: null,
      value?: null,
      shares?: null,
      amountGiven?: null
    ): OnboardedEventFilter;
  };

  estimateGas: {
    amountPerCredential(overrides?: CallOverrides): Promise<BigNumber>;

    baal(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _moloch: PromiseOrValue<string>,
      _vcVerifier: PromiseOrValue<string>,
      _shares: PromiseOrValue<boolean>,
      _amountPerCredential: PromiseOrValue<BigNumberish>,
      _tributeToken: PromiseOrValue<string>,
      _minTribute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minTribute(overrides?: CallOverrides): Promise<BigNumber>;

    onboarder(
      _credential: DocumentStruct,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onboarder20(
      _credential: DocumentStruct,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shares(overrides?: CallOverrides): Promise<BigNumber>;

    tributeToken(overrides?: CallOverrides): Promise<BigNumber>;

    vcVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    verifiedStamps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amountPerCredential(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _moloch: PromiseOrValue<string>,
      _vcVerifier: PromiseOrValue<string>,
      _shares: PromiseOrValue<boolean>,
      _amountPerCredential: PromiseOrValue<BigNumberish>,
      _tributeToken: PromiseOrValue<string>,
      _minTribute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minTribute(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onboarder(
      _credential: DocumentStruct,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onboarder20(
      _credential: DocumentStruct,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tributeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vcVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifiedStamps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
