/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface BaalSummonerInterface extends utils.Interface {
  functions: {
    "addrsVersion()": FunctionFragment;
    "deployAndSetupSafe(address)": FunctionFragment;
    "deployTokens(string,string)": FunctionFragment;
    "encodeMultisend(bytes[],address)": FunctionFragment;
    "gnosisFallbackLibrary()": FunctionFragment;
    "gnosisMultisendLibrary()": FunctionFragment;
    "gnosisSingleton()": FunctionFragment;
    "initialize()": FunctionFragment;
    "lootSingleton()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddrs(address,address,address,address,address,address,address,address)": FunctionFragment;
    "sharesSingleton()": FunctionFragment;
    "summonBaal(bytes,bytes[],uint256)": FunctionFragment;
    "summonBaalFromReferrer(bytes,bytes[],uint256,bytes32)": FunctionFragment;
    "template()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addrsVersion"
      | "deployAndSetupSafe"
      | "deployTokens"
      | "encodeMultisend"
      | "gnosisFallbackLibrary"
      | "gnosisMultisendLibrary"
      | "gnosisSingleton"
      | "initialize"
      | "lootSingleton"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setAddrs"
      | "sharesSingleton"
      | "summonBaal"
      | "summonBaalFromReferrer"
      | "template"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addrsVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployAndSetupSafe",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMultisend",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "gnosisFallbackLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gnosisMultisendLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gnosisSingleton",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lootSingleton",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddrs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesSingleton",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "summonBaal",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "summonBaalFromReferrer",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "template", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addrsVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAndSetupSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeMultisend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gnosisFallbackLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gnosisMultisendLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gnosisSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lootSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddrs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharesSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "summonBaal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "summonBaalFromReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "template", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DaoReferral(bytes32,address)": EventFragment;
    "DeployBaalSafe(address,address)": EventFragment;
    "DeployBaalTokens(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAddrsVersion(uint256)": EventFragment;
    "SummonBaal(address,address,address,address,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployBaalSafe"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployBaalTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAddrsVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SummonBaal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DaoReferralEventObject {
  referrer: string;
  daoAddress: string;
}
export type DaoReferralEvent = TypedEvent<
  [string, string],
  DaoReferralEventObject
>;

export type DaoReferralEventFilter = TypedEventFilter<DaoReferralEvent>;

export interface DeployBaalSafeEventObject {
  baalSafe: string;
  moduleAddr: string;
}
export type DeployBaalSafeEvent = TypedEvent<
  [string, string],
  DeployBaalSafeEventObject
>;

export type DeployBaalSafeEventFilter = TypedEventFilter<DeployBaalSafeEvent>;

export interface DeployBaalTokensEventObject {
  lootToken: string;
  sharesToken: string;
}
export type DeployBaalTokensEvent = TypedEvent<
  [string, string],
  DeployBaalTokensEventObject
>;

export type DeployBaalTokensEventFilter =
  TypedEventFilter<DeployBaalTokensEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetAddrsVersionEventObject {
  version: BigNumber;
}
export type SetAddrsVersionEvent = TypedEvent<
  [BigNumber],
  SetAddrsVersionEventObject
>;

export type SetAddrsVersionEventFilter = TypedEventFilter<SetAddrsVersionEvent>;

export interface SummonBaalEventObject {
  baal: string;
  loot: string;
  shares: string;
  safe: string;
  forwarder: string;
  existingAddrs: BigNumber;
}
export type SummonBaalEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  SummonBaalEventObject
>;

export type SummonBaalEventFilter = TypedEventFilter<SummonBaalEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface BaalSummoner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaalSummonerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addrsVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    deployAndSetupSafe(
      _moduleAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployTokens(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encodeMultisend(
      _calls: PromiseOrValue<BytesLike>[],
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { encodedMultisend: string }>;

    gnosisFallbackLibrary(overrides?: CallOverrides): Promise<[string]>;

    gnosisMultisendLibrary(overrides?: CallOverrides): Promise<[string]>;

    gnosisSingleton(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lootSingleton(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddrs(
      _template: PromiseOrValue<string>,
      _gnosisSingleton: PromiseOrValue<string>,
      _gnosisFallbackLibrary: PromiseOrValue<string>,
      _gnosisMultisendLibrary: PromiseOrValue<string>,
      _gnosisSafeProxyFactory: PromiseOrValue<string>,
      _moduleProxyFactory: PromiseOrValue<string>,
      _lootSingleton: PromiseOrValue<string>,
      _sharesSingleton: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sharesSingleton(overrides?: CallOverrides): Promise<[string]>;

    summonBaal(
      initializationParams: PromiseOrValue<BytesLike>,
      initializationActions: PromiseOrValue<BytesLike>[],
      _saltNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    summonBaalFromReferrer(
      initializationParams: PromiseOrValue<BytesLike>,
      initializationActions: PromiseOrValue<BytesLike>[],
      _saltNonce: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    template(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addrsVersion(overrides?: CallOverrides): Promise<BigNumber>;

  deployAndSetupSafe(
    _moduleAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployTokens(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encodeMultisend(
    _calls: PromiseOrValue<BytesLike>[],
    _target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  gnosisFallbackLibrary(overrides?: CallOverrides): Promise<string>;

  gnosisMultisendLibrary(overrides?: CallOverrides): Promise<string>;

  gnosisSingleton(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lootSingleton(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddrs(
    _template: PromiseOrValue<string>,
    _gnosisSingleton: PromiseOrValue<string>,
    _gnosisFallbackLibrary: PromiseOrValue<string>,
    _gnosisMultisendLibrary: PromiseOrValue<string>,
    _gnosisSafeProxyFactory: PromiseOrValue<string>,
    _moduleProxyFactory: PromiseOrValue<string>,
    _lootSingleton: PromiseOrValue<string>,
    _sharesSingleton: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sharesSingleton(overrides?: CallOverrides): Promise<string>;

  summonBaal(
    initializationParams: PromiseOrValue<BytesLike>,
    initializationActions: PromiseOrValue<BytesLike>[],
    _saltNonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  summonBaalFromReferrer(
    initializationParams: PromiseOrValue<BytesLike>,
    initializationActions: PromiseOrValue<BytesLike>[],
    _saltNonce: PromiseOrValue<BigNumberish>,
    referrer: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  template(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addrsVersion(overrides?: CallOverrides): Promise<BigNumber>;

    deployAndSetupSafe(
      _moduleAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployTokens(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { lootToken: string; sharesToken: string }>;

    encodeMultisend(
      _calls: PromiseOrValue<BytesLike>[],
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    gnosisFallbackLibrary(overrides?: CallOverrides): Promise<string>;

    gnosisMultisendLibrary(overrides?: CallOverrides): Promise<string>;

    gnosisSingleton(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    lootSingleton(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddrs(
      _template: PromiseOrValue<string>,
      _gnosisSingleton: PromiseOrValue<string>,
      _gnosisFallbackLibrary: PromiseOrValue<string>,
      _gnosisMultisendLibrary: PromiseOrValue<string>,
      _gnosisSafeProxyFactory: PromiseOrValue<string>,
      _moduleProxyFactory: PromiseOrValue<string>,
      _lootSingleton: PromiseOrValue<string>,
      _sharesSingleton: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sharesSingleton(overrides?: CallOverrides): Promise<string>;

    summonBaal(
      initializationParams: PromiseOrValue<BytesLike>,
      initializationActions: PromiseOrValue<BytesLike>[],
      _saltNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    summonBaalFromReferrer(
      initializationParams: PromiseOrValue<BytesLike>,
      initializationActions: PromiseOrValue<BytesLike>[],
      _saltNonce: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    template(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "DaoReferral(bytes32,address)"(
      referrer?: null,
      daoAddress?: null
    ): DaoReferralEventFilter;
    DaoReferral(referrer?: null, daoAddress?: null): DaoReferralEventFilter;

    "DeployBaalSafe(address,address)"(
      baalSafe?: null,
      moduleAddr?: null
    ): DeployBaalSafeEventFilter;
    DeployBaalSafe(
      baalSafe?: null,
      moduleAddr?: null
    ): DeployBaalSafeEventFilter;

    "DeployBaalTokens(address,address)"(
      lootToken?: null,
      sharesToken?: null
    ): DeployBaalTokensEventFilter;
    DeployBaalTokens(
      lootToken?: null,
      sharesToken?: null
    ): DeployBaalTokensEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetAddrsVersion(uint256)"(version?: null): SetAddrsVersionEventFilter;
    SetAddrsVersion(version?: null): SetAddrsVersionEventFilter;

    "SummonBaal(address,address,address,address,address,uint256)"(
      baal?: PromiseOrValue<string> | null,
      loot?: PromiseOrValue<string> | null,
      shares?: PromiseOrValue<string> | null,
      safe?: null,
      forwarder?: null,
      existingAddrs?: null
    ): SummonBaalEventFilter;
    SummonBaal(
      baal?: PromiseOrValue<string> | null,
      loot?: PromiseOrValue<string> | null,
      shares?: PromiseOrValue<string> | null,
      safe?: null,
      forwarder?: null,
      existingAddrs?: null
    ): SummonBaalEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    addrsVersion(overrides?: CallOverrides): Promise<BigNumber>;

    deployAndSetupSafe(
      _moduleAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployTokens(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encodeMultisend(
      _calls: PromiseOrValue<BytesLike>[],
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gnosisFallbackLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    gnosisMultisendLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    gnosisSingleton(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lootSingleton(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddrs(
      _template: PromiseOrValue<string>,
      _gnosisSingleton: PromiseOrValue<string>,
      _gnosisFallbackLibrary: PromiseOrValue<string>,
      _gnosisMultisendLibrary: PromiseOrValue<string>,
      _gnosisSafeProxyFactory: PromiseOrValue<string>,
      _moduleProxyFactory: PromiseOrValue<string>,
      _lootSingleton: PromiseOrValue<string>,
      _sharesSingleton: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sharesSingleton(overrides?: CallOverrides): Promise<BigNumber>;

    summonBaal(
      initializationParams: PromiseOrValue<BytesLike>,
      initializationActions: PromiseOrValue<BytesLike>[],
      _saltNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    summonBaalFromReferrer(
      initializationParams: PromiseOrValue<BytesLike>,
      initializationActions: PromiseOrValue<BytesLike>[],
      _saltNonce: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    template(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addrsVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployAndSetupSafe(
      _moduleAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployTokens(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encodeMultisend(
      _calls: PromiseOrValue<BytesLike>[],
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gnosisFallbackLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gnosisMultisendLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gnosisSingleton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lootSingleton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddrs(
      _template: PromiseOrValue<string>,
      _gnosisSingleton: PromiseOrValue<string>,
      _gnosisFallbackLibrary: PromiseOrValue<string>,
      _gnosisMultisendLibrary: PromiseOrValue<string>,
      _gnosisSafeProxyFactory: PromiseOrValue<string>,
      _moduleProxyFactory: PromiseOrValue<string>,
      _lootSingleton: PromiseOrValue<string>,
      _sharesSingleton: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sharesSingleton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    summonBaal(
      initializationParams: PromiseOrValue<BytesLike>,
      initializationActions: PromiseOrValue<BytesLike>[],
      _saltNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    summonBaalFromReferrer(
      initializationParams: PromiseOrValue<BytesLike>,
      initializationActions: PromiseOrValue<BytesLike>[],
      _saltNonce: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    template(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
