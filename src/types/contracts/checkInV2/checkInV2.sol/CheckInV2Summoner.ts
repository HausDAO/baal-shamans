/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface CheckInV2SummonerInterface extends utils.Interface {
  functions: {
    "summon(address,address,bool,uint256,uint256,uint32[5],string)": FunctionFragment;
    "template()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "summon" | "template"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "summon",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "template", values?: undefined): string;

  decodeFunctionResult(functionFragment: "summon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "template", data: BytesLike): Result;

  events: {
    "CheckInSummonComplete(address,address,address,address,bool,uint256,uint256,uint32[5],string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CheckInSummonComplete"): EventFragment;
}

export interface CheckInSummonCompleteEventObject {
  baal: string;
  summoner: string;
  shamanAddress: string;
  teamLead: string;
  sharesOrLoot: boolean;
  tokenPerSecond: BigNumber;
  checkInInterval: BigNumber;
  valueScalePercs: [number, number, number, number, number];
  projectMetadata: string;
}
export type CheckInSummonCompleteEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    [number, number, number, number, number],
    string
  ],
  CheckInSummonCompleteEventObject
>;

export type CheckInSummonCompleteEventFilter =
  TypedEventFilter<CheckInSummonCompleteEvent>;

export interface CheckInV2Summoner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheckInV2SummonerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    summon(
      _baal: PromiseOrValue<string>,
      _teamLead: PromiseOrValue<string>,
      _sharesOrLoot: PromiseOrValue<boolean>,
      _tokenPerSecond: PromiseOrValue<BigNumberish>,
      _checkInInterval: PromiseOrValue<BigNumberish>,
      _valueScalePercs: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _projectMetadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    template(overrides?: CallOverrides): Promise<[string]>;
  };

  summon(
    _baal: PromiseOrValue<string>,
    _teamLead: PromiseOrValue<string>,
    _sharesOrLoot: PromiseOrValue<boolean>,
    _tokenPerSecond: PromiseOrValue<BigNumberish>,
    _checkInInterval: PromiseOrValue<BigNumberish>,
    _valueScalePercs: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _projectMetadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  template(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    summon(
      _baal: PromiseOrValue<string>,
      _teamLead: PromiseOrValue<string>,
      _sharesOrLoot: PromiseOrValue<boolean>,
      _tokenPerSecond: PromiseOrValue<BigNumberish>,
      _checkInInterval: PromiseOrValue<BigNumberish>,
      _valueScalePercs: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _projectMetadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    template(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CheckInSummonComplete(address,address,address,address,bool,uint256,uint256,uint32[5],string)"(
      baal?: PromiseOrValue<string> | null,
      summoner?: PromiseOrValue<string> | null,
      shamanAddress?: PromiseOrValue<string> | null,
      teamLead?: null,
      sharesOrLoot?: null,
      tokenPerSecond?: null,
      checkInInterval?: null,
      valueScalePercs?: null,
      projectMetadata?: null
    ): CheckInSummonCompleteEventFilter;
    CheckInSummonComplete(
      baal?: PromiseOrValue<string> | null,
      summoner?: PromiseOrValue<string> | null,
      shamanAddress?: PromiseOrValue<string> | null,
      teamLead?: null,
      sharesOrLoot?: null,
      tokenPerSecond?: null,
      checkInInterval?: null,
      valueScalePercs?: null,
      projectMetadata?: null
    ): CheckInSummonCompleteEventFilter;
  };

  estimateGas: {
    summon(
      _baal: PromiseOrValue<string>,
      _teamLead: PromiseOrValue<string>,
      _sharesOrLoot: PromiseOrValue<boolean>,
      _tokenPerSecond: PromiseOrValue<BigNumberish>,
      _checkInInterval: PromiseOrValue<BigNumberish>,
      _valueScalePercs: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _projectMetadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    template(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    summon(
      _baal: PromiseOrValue<string>,
      _teamLead: PromiseOrValue<string>,
      _sharesOrLoot: PromiseOrValue<boolean>,
      _tokenPerSecond: PromiseOrValue<BigNumberish>,
      _checkInInterval: PromiseOrValue<BigNumberish>,
      _valueScalePercs: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _projectMetadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    template(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
